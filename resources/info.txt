Computer science is the study of computation, information, and automation.[1][2][3]
Computer science spans theoretical disciplines (such as algorithms, theory of computation, and information theory) to applied disciplines (including the design and implementation of hardware and software).[4][5][6]
Though more often considered an academic discipline, computer science is closely related to computer programming.[7]

Algorithms and data structures are central to computer science.[8]
The theory of computation concerns abstract models of computation and general classes of problems that can be solved using them.
The fields of cryptography and computer security involve studying the means for secure communication and for preventing security vulnerabilities.
Computer graphics and computational geometry address the generation of images.
Programming language theory considers different ways to describe computational processes, and database theory concerns the management of repositories of data.
Human–computer interaction investigates the interfaces through which humans and computers interact, and software engineering focuses on the design and principles behind developing software.
Areas such as operating systems, networks and embedded systems investigate the principles and design behind complex systems.
Computer architecture describes the construction of computer components and computer-operated equipment.
Artificial intelligence and machine learning aim to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, planning and learning found in humans and animals.
Within artificial intelligence, computer vision aims to understand and process image and video data, while natural language processing aims to understand and process textual and linguistic data.

The fundamental concern of computer science is determining what can and cannot be automated.[2][9][3][10][11]
The Turing Award is generally recognized as the highest distinction in computer science.[12][13]

The earliest foundations of what would become computer science predate the invention of the modern digital computer. Machines for calculating fixed numerical tasks such as the abacus have existed since antiquity, aiding in computations such as multiplication and division. Algorithms for performing computations have existed since antiquity, even before the development of sophisticated computing equipment.[17]

Wilhelm Schickard designed and constructed the first working mechanical calculator in 1623.[18] In 1673, Gottfried Leibniz demonstrated a digital mechanical calculator, called the Stepped Reckoner.[19] Leibniz may be considered the first computer scientist and information theorist, because of various reasons, including the fact that he documented the binary number system. In 1820, Thomas de Colmar launched the mechanical calculator industry[note 1] when he invented his simplified arithmometer, the first calculating machine strong enough and reliable enough to be used daily in an office environment. Charles Babbage started the design of the first automatic mechanical calculator, his Difference Engine, in 1822, which eventually gave him the idea of the first programmable mechanical calculator, his Analytical Engine.[20] He started developing this machine in 1834, and "in less than two years, he had sketched out many of the salient features of the modern computer".[21] "A crucial step was the adoption of a punched card system derived from the Jacquard loom"[21] making it infinitely programmable.[note 2] In 1843, during the translation of a French article on the Analytical Engine, Ada Lovelace wrote, in one of the many notes she included, an algorithm to compute the Bernoulli numbers, which is considered to be the first published algorithm ever specifically tailored for implementation on a computer.[22] Around 1885, Herman Hollerith invented the tabulator, which used punched cards to process statistical information; eventually his company became part of IBM. Following Babbage, although unaware of his earlier work, Percy Ludgate in 1909 published[23] the 2nd of the only two designs for mechanical analytical engines in history. In 1914, the Spanish engineer Leonardo Torres Quevedo published his Essays on Automatics,[24] and designed, inspired by Babbage, a theoretical electromechanical calculating machine which was to be controlled by a read-only program. The paper also introduced the idea of floating-point arithmetic.[25][26] In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris the Electromechanical Arithmometer, a prototype that demonstrated the feasibility of an electromechanical analytical engine,[27] on which commands could be typed and the results printed automatically.[28] In 1937, one hundred years after Babbage's impossible dream, Howard Aiken convinced IBM, which was making all kinds of punched card equipment and was also in the calculator business[29] to develop his giant programmable calculator, the ASCC/Harvard Mark I, based on Babbage's Analytical Engine, which itself used cards and a central computing unit. When the machine was finished, some hailed it as "Babbage's dream come true".[30]

During the 1940s, with the development of new and more powerful computing machines such as the Atanasoff–Berry computer and ENIAC, the term computer came to refer to the machines rather than their human predecessors.[31] As it became clear that computers could be used for more than just mathematical calculations, the field of computer science broadened to study computation in general. In 1945, IBM founded the Watson Scientific Computing Laboratory at Columbia University in New York City. The renovated fraternity house on Manhattan's West Side was IBM's first laboratory devoted to pure science. The lab is the forerunner of IBM's Research Division, which today operates research facilities around the world.[32] Ultimately, the close relationship between IBM and Columbia University was instrumental in the emergence of a new scientific discipline, with Columbia offering one of the first academic-credit courses in computer science in 1946.[33] Computer science began to be established as a distinct academic discipline in the 1950s and early 1960s.[7][34] The world's first computer science degree program, the Cambridge Diploma in Computer Science, began at the University of Cambridge Computer Laboratory in 1953. The first computer science department in the United States was formed at Purdue University in 1962.[35] Since practical computers became available, many applications of computing have become distinct areas of study in their own rights.
See also: History of computing and History of informatics
Etymology and scope
See also: Informatics § Etymology
Although first proposed in 1956,[36] the term "computer science" appears in a 1959 article in Communications of the ACM,[37] in which Louis Fein argues for the creation of a Graduate School in Computer Sciences analogous to the creation of Harvard Business School in 1921.[38] Louis justifies the name by arguing that, like management science, the subject is applied and interdisciplinary in nature, while having the characteristics typical of an academic discipline.[37] His efforts, and those of others such as numerical analyst George Forsythe, were rewarded: universities went on to create such departments, starting with Purdue in 1962.[39] Despite its name, a significant amount of computer science does not involve the study of computers themselves. Because of this, several alternative names have been proposed.[40] Certain departments of major universities prefer the term computing science, to emphasize precisely that difference. Danish scientist Peter Naur suggested the term datalogy,[41] to reflect the fact that the scientific discipline revolves around data and data treatment, while not necessarily involving computers. The first scientific institution to use the term was the Department of Datalogy at the University of Copenhagen, founded in 1969, with Peter Naur being the first professor in datalogy. The term is used mainly in the Scandinavian countries. An alternative term, also proposed by Naur, is data science; this is now used for a multi-disciplinary field of data analysis, including statistics and databases.

In the early days of computing, a number of terms for the practitioners of the field of computing were suggested in the Communications of the ACM—turingineer, turologist, flow-charts-man, applied meta-mathematician, and applied epistemologist.[42] Three months later in the same journal, comptologist was suggested, followed next year by hypologist.[43] The term computics has also been suggested.[44] In Europe, terms derived from contracted translations of the expression "automatic information" (e.g. "informazione automatica" in Italian) or "information and mathematics" are often used, e.g. informatique (French), Informatik (German), informatica (Italian, Dutch), informática (Spanish, Portuguese), informatika (Slavic languages and Hungarian) or pliroforiki (πληροφορική, which means informatics) in Greek. Similar words have also been adopted in the UK (as in the School of Informatics, University of Edinburgh).[45] "In the U.S., however, informatics is linked with applied computing, or computing in the context of another domain."[46]

A folkloric quotation, often attributed to—but almost certainly not first formulated by—Edsger Dijkstra, states that "computer science is no more about computers than astronomy is about telescopes."[note 3] The design and deployment of computers and computer systems is generally considered the province of disciplines other than computer science. For example, the study of computer hardware is usually considered part of computer engineering, while the study of commercial computer systems and their deployment is often called information technology or information systems. However, there has been exchange of ideas between the various computer-related disciplines. Computer science research also often intersects other disciplines, such as cognitive science, linguistics, mathematics, physics, biology, Earth science, statistics, philosophy, and logic.

Computer science is considered by some to have a much closer relationship with mathematics than many scientific disciplines, with some observers saying that computing is a mathematical science.[7] Early computer science was strongly influenced by the work of mathematicians such as Kurt Gödel, Alan Turing, John von Neumann, Rózsa Péter and Alonzo Church and there continues to be a useful interchange of ideas between the two fields in areas such as mathematical logic, category theory, domain theory, and algebra.[36]

The relationship between computer science and software engineering is a contentious issue, which is further muddied by disputes over what the term "software engineering" means, and how computer science is defined.[47] David Parnas, taking a cue from the relationship between other engineering and science disciplines, has claimed that the principal focus of computer science is studying the properties of computation in general, while the principal focus of software engineering is the design of specific computations to achieve practical goals, making the two separate but complementary disciplines.[48]

The academic, political, and funding aspects of computer science tend to depend on whether a department is formed with a mathematical emphasis or with an engineering emphasis. Computer science departments with a mathematics emphasis and with a numerical orientation consider alignment with computational science. Both types of departments tend to make efforts to bridge the field educationally if not across all research.

Fields
This is a dynamic list and may never be able to satisfy particular standards for completeness. You can help by adding missing items with reliable sources.
Further information: Outline of computer science
As a discipline, computer science spans a range of topics from theoretical studies of algorithms and the limits of computation to the practical issues of implementing computing systems in hardware and software.[56][57] CSAB, formerly called Computing Sciences Accreditation Board—which is made up of representatives of the Association for Computing Machinery (ACM), and the IEEE Computer Society (IEEE CS)[58]—identifies four areas that it considers crucial to the discipline of computer science: theory of computation, algorithms and data structures, programming methodology and languages, and computer elements and architecture. In addition to these four areas, CSAB also identifies fields such as software engineering, artificial intelligence, computer networking and communication, database systems, parallel computation, distributed computation, human–computer interaction, computer graphics, operating systems, and numerical and symbolic computation as being important areas of computer science.[56]

Theoretical computer science
Main article: Theoretical computer science
Theoretical Computer Science is mathematical and abstract in spirit, but it derives its motivation from the practical and everyday computation. Its aim is to understand the nature of computation and, as a consequence of this understanding, provide more efficient methodologies.

Theory of computation
Main article: Theory of computation
According to Peter Denning, the fundamental question underlying computer science is, "What can be automated?"[3] Theory of computation is focused on answering fundamental questions about what can be computed and what amount of resources are required to perform those computations. In an effort to answer the first question, computability theory examines which computational problems are solvable on various theoretical models of computation. The second question is addressed by computational complexity theory, which studies the time and space costs associated with different approaches to solving a multitude of computational problems.

The famous P = NP? problem, one of the Millennium Prize Problems,[59] is an open problem in the theory of computation.


�
=
{
�
:
�
∉
�
}
{\displaystyle M=\{X:X\not \in X\}}
Automata theory	Formal languages	Computability theory	Computational complexity theory

Models of computation	Quantum computing theory	Logic circuit theory	Cellular automata
Information and coding theory
Main articles: Information theory and Coding theory
Information theory, closely related to probability and statistics, is related to the quantification of information. This was developed by Claude Shannon to find fundamental limits on signal processing operations such as compressing data and on reliably storing and communicating data.[60] Coding theory is the study of the properties of codes (systems for converting information from one form to another) and their fitness for a specific application. Codes are used for data compression, cryptography, error detection and correction, and more recently also for network coding. Codes are studied for the purpose of designing efficient and reliable data transmission methods. [61]


Coding theory	Channel capacity	Algorithmic information theory	Signal detection theory	Kolmogorov complexity
Data structures and algorithms
Main articles: Data structure and Algorithm
Data structures and algorithms are the studies of commonly used computational methods and their computational efficiency.

O(n2)
Analysis of algorithms	Algorithm design	Data structures	Combinatorial optimization	Computational geometry	Randomized algorithms
Programming language theory and formal methods
Main articles: Programming language theory and Formal methods
Programming language theory is a branch of computer science that deals with the design, implementation, analysis, characterization, and classification of programming languages and their individual features. It falls within the discipline of computer science, both depending on and affecting mathematics, software engineering, and linguistics. It is an active research area, with numerous dedicated academic journals.

Formal methods are a particular kind of mathematically based technique for the specification, development and verification of software and hardware systems.[62] The use of formal methods for software and hardware design is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design. They form an important theoretical underpinning for software engineering, especially where safety or security is involved. Formal methods are a useful adjunct to software testing since they help avoid errors and can also give a framework for testing. For industrial use, tool support is required. However, the high cost of using formal methods means that they are usually only used in the development of high-integrity and life-critical systems, where safety or security is of utmost importance. Formal methods are best described as the application of a fairly broad variety of theoretical computer science fundamentals, in particular logic calculi, formal languages, automata theory, and program semantics, but also type systems and algebraic data types to problems in software and hardware specification and verification.


Γ
⊢
�
:
Int
\Gamma \vdash x:{\text{Int}}
Formal semantics	Type theory	Compiler design	Programming languages	Formal verification	Automated theorem proving
Applied computer science
Computer graphics and visualization
Main article: Computer graphics (computer science)
Computer graphics is the study of digital visual contents and involves the synthesis and manipulation of image data. The study is connected to many other fields in computer science, including computer vision, image processing, and computational geometry, and is heavily applied in the fields of special effects and video games.


2D computer graphics	Computer animation	Rendering	Mixed reality	Virtual reality	Solid modeling
Image and sound processing
Main article: Data processing
Information can take the form of images, sound, video or other multimedia. Bits of information can be streamed via signals. Its processing is the central notion of informatics, the European view on computing, which studies information processing algorithms independently of the type of information carrier – whether it is electrical, mechanical or biological. This field plays important role in information theory, telecommunications, information engineering and has applications in medical image computing and speech synthesis, among others. What is the lower bound on the complexity of fast Fourier transform algorithms? is one of unsolved problems in theoretical computer science.


FFT algorithms	Image processing	Speech recognition	Data compression	Medical image computing	Speech synthesis
Computational science, finance and engineering
Main articles: Computational science, Computational finance, and Computational engineering
Scientific computing (or computational science) is the field of study concerned with constructing mathematical models and quantitative analysis techniques and using computers to analyze and solve scientific problems. A major usage of scientific computing is simulation of various processes, including computational fluid dynamics, physical, electrical, and electronic systems and circuits, as well as societies and social situations (notably war games) along with their habitats, among many others. Modern computers enable optimization of such designs as complete aircraft. Notable in electrical and electronic circuit design are SPICE,[63] as well as software for physical realization of new (or modified) designs. The latter includes essential design software for integrated circuits.[64]


Numerical analysis	Computational physics	Computational chemistry	Bioinformatics	Neuroinformatics	Psychoinformatics	Medical informatics	Computational engineering	Computational musicology
Social computing and human–computer interaction
Main articles: Social computing and Human–computer interaction
Social computing is an area that is concerned with the intersection of social behavior and computational systems. Human–computer interaction research develops theories, principles, and guidelines for user interface designers.

Software engineering
Main article: Software engineering
See also: Computer programming
Software engineering is the study of designing, implementing, and modifying the software in order to ensure it is of high quality, affordable, maintainable, and fast to build. It is a systematic approach to software design, involving the application of engineering practices to software. Software engineering deals with the organizing and analyzing of software—it does not just deal with the creation or manufacture of new software, but its internal arrangement and maintenance. For example software testing, systems engineering, technical debt and software development processes.

Artificial intelligence
Main articles: Artificial intelligence and Bio-inspired computing
Artificial intelligence (AI) aims to or is required to synthesize goal-orientated processes such as problem-solving, decision-making, environmental adaptation, learning, and communication found in humans and animals. From its origins in cybernetics and in the Dartmouth Conference (1956), artificial intelligence research has been necessarily cross-disciplinary, drawing on areas of expertise such as applied mathematics, symbolic logic, semiotics, electrical engineering, philosophy of mind, neurophysiology, and social intelligence. AI is associated in the popular mind with robotic development, but the main field of practical application has been as an embedded component in areas of software development, which require computational understanding. The starting point in the late 1940s was Alan Turing's question "Can computers think?", and the question remains effectively unanswered, although the Turing test is still used to assess computer output on the scale of human intelligence. But the automation of evaluative and predictive tasks has been increasingly successful as a substitute for human monitoring and intervention in domains of computer application involving complex real-world data.


Computational learning theory	Computer vision	Neural networks	Planning and scheduling

Natural language processing	Computational game theory	Evolutionary computation	Autonomic computing

Representation and reasoning	Pattern recognition	Robotics	Swarm intelligence
Computer systems
Computer architecture and organization
Main articles: Computer architecture, Computer organisation, and Computer engineering
Computer architecture, or digital computer organization, is the conceptual design and fundamental operational structure of a computer system. It focuses largely on the way by which the central processing unit performs internally and accesses addresses in memory.[65] Computer engineers study computational logic and design of computer hardware, from individual processor components, microcontrollers, personal computers to supercomputers and embedded systems. The term "architecture" in computer literature can be traced to the work of Lyle R. Johnson and Frederick P. Brooks Jr., members of the Machine Organization department in IBM's main research center in 1959.


Processing unit	Microarchitecture	Multiprocessing	Processor design

Ubiquitous computing	Systems architecture	Operating systems	Input/output

Embedded system	Real-time computing	Dependability	Interpreter
Concurrent, parallel and distributed computing
Main articles: Concurrency (computer science) and Distributed computing
Concurrency is a property of systems in which several computations are executing simultaneously, and potentially interacting with each other.[66] A number of mathematical models have been developed for general concurrent computation including Petri nets, process calculi and the Parallel Random Access Machine model.[67] When multiple computers are connected in a network while using concurrency, this is known as a distributed system. Computers within that distributed system have their own private memory, and information can be exchanged to achieve common goals.[68]

Computer networks
Main article: Computer network
This branch of computer science aims to manage networks between computers worldwide.

Computer security and cryptography
Main articles: Computer security and Cryptography
Computer security is a branch of computer technology with the objective of protecting information from unauthorized access, disruption, or modification while maintaining the accessibility and usability of the system for its intended users.

Historical cryptography is the art of writing and deciphering secret messages. Modern cryptography is the scientific study of problems relating to distributed computations that can be attacked.[69] Technologies studied in modern cryptography include symmetric and asymmetric encryption, digital signatures, cryptographic hash functions, key-agreement protocols, blockchain, zero-knowledge proofs, and garbled circuits.

Databases and data mining
Main articles: Database and Data mining
A database is intended to organize, store, and retrieve large amounts of data easily. Digital databases are managed using database management systems to store, create, maintain, and search data, through database models and query languages. Data mining is a process of discovering patterns in large data sets.

Discoveries
The philosopher of computing Bill Rapaport noted three Great Insights of Computer Science:[70]

Gottfried Wilhelm Leibniz's, George Boole's, Alan Turing's, Claude Shannon's, and Samuel Morse's insight: there are only two objects that a computer has to deal with in order to represent "anything".[note 4]
All the information about any computable problem can be represented using only 0 and 1 (or any other bistable pair that can flip-flop between two easily distinguishable states, such as "on/off", "magnetized/de-magnetized", "high-voltage/low-voltage", etc.).
See also: Digital physics
Alan Turing's insight: there are only five actions that a computer has to perform in order to do "anything".
Every algorithm can be expressed in a language for a computer consisting of only five basic instructions:[71]
move left one location;
move right one location;
read symbol at current location;
print 0 at current location;
print 1 at current location.
See also: Turing machine
Corrado Böhm and Giuseppe Jacopini's insight: there are only three ways of combining these actions (into more complex ones) that are needed in order for a computer to do "anything".[72]
Only three rules are needed to combine any set of basic instructions into more complex ones:
sequence: first do this, then do that;
selection: IF such-and-such is the case, THEN do this, ELSE do that;
repetition: WHILE such-and-such is the case, DO this.
The three rules of Boehm's and Jacopini's insight can be further simplified with the use of goto (which means it is more elementary than structured programming).
See also: Structured program theorem
Programming paradigms
Main article: Programming paradigm
Programming languages can be used to accomplish different tasks in different ways. Common programming paradigms include:

Functional programming, a style of building the structure and elements of computer programs that treats computation as the evaluation of mathematical functions and avoids state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements.[73]
Imperative programming, a programming paradigm that uses statements that change a program's state.[74] In much the same way that the imperative mood in natural languages expresses commands, an imperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates.
Object-oriented programming, a programming paradigm based on the concept of "objects", which may contain data, in the form of fields, often known as attributes; and code, in the form of procedures, often known as methods. A feature of objects is that an object's procedures can access and often modify the data fields of the object with which they are associated. Thus object-oriented computer programs are made out of objects that interact with one another.[75]
Service-oriented programming, a programming paradigm that uses "services" as the unit of computer work, to design and implement integrated business applications and mission critical software programs
Many languages offer support for multiple paradigms, making the distinction more a matter of style than of technical capabilities.[76]

Research
Further information: List of computer science conferences and Category:Computer science journals
Conferences are important events for computer science research. During these conferences, researchers from the public and private sectors present their recent work and meet. Unlike in most other academic fields, in computer science, the prestige of conference papers is greater than that of journal publications.[77][78] One proposed explanation for this is the quick development of this relatively new field requires rapid review and distribution of results, a task better handled by conferences than by journals.[79]

Education
Main article: Computer science education
Computer Science, known by its near synonyms, Computing, Computer Studies, has been taught in UK schools since the days of batch processing, mark sensitive cards and paper tape but usually to a select few students.[80] In 1981, the BBC produced a micro-computer and classroom network and Computer Studies became common for GCE O level students (11–16-year-old), and Computer Science to A level students. Its importance was recognised, and it became a compulsory part of the National Curriculum, for Key Stage 3 & 4. In September 2014 it became an entitlement for all pupils over the age of 4.[81]

In the US, with 14,000 school districts deciding the curriculum, provision was fractured.[82] According to a 2010 report by the Association for Computing Machinery (ACM) and Computer Science Teachers Association (CSTA), only 14 out of 50 states have adopted significant education standards for high school computer science.[83] According to a 2021 report, only 51% of high schools in the US offer computer science.[84]

Israel, New Zealand, and South Korea have included computer science in their national secondary education curricula,[85][86] and several others are following.[87]

See also
Glossary of computer science
List of computer scientists
List of computer science awards
List of pioneers in computer science
Outline of computer science
Notes
 In 1851
 "The introduction of punched cards into the new engine was important not only as a more convenient form of control than the drums, or because programs could now be of unlimited extent, and could be stored and repeated without the danger of introducing errors in setting the machine by hand; it was important also because it served to crystallize Babbage's feeling that he had invented something really new, something much more than a sophisticated calculating machine." Bruce Collier, 1970
 See the entry "Computer science" on Wikiquote for the history of this quotation.
 The word "anything" is written in quotation marks because there are things that computers cannot do. One example is: to answer the question if an arbitrary given computer program will eventually finish or run forever (the Halting problem).
References
 "What is Computer Science?". Department of Computer Science, University of York. Archived from the original on June 11, 2020. Retrieved June 11, 2020.
 What Can Be Automated? Computer Science and Engineering Research Study. Computer Science Series. MIT Press. 1980. ISBN 978-0262010603. Archived from the original on January 9, 2021.
 Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.; Turner, A.J.; Young, P.R. (February 1989). "Computing as a discipline". Computer. 22 (2): 63–70. doi:10.1109/2.19833. ISSN 1558-0814. Archived from the original on March 3, 2022. Retrieved March 3, 2022. The discipline of computing is the systematic study of algorithmic processes that describe and transform information, their theory, analysis, design, efficiency, implementation, and application. The fundamental question underlying all of computing is, 'What can be (efficiently) automated?'
 "WordNet Search—3.1". WordNet Search. Wordnetweb.princeton.edu. Archived from the original on October 18, 2017. Retrieved May 14, 2012.
 "Definition of computer science | Dictionary.com". www.dictionary.com. Archived from the original on June 11, 2020. Retrieved June 11, 2020.
 "What is Computer Science? | Undergraduate Computer Science at UMD". undergrad.cs.umd.edu. Archived from the original on November 27, 2020. Retrieved July 15, 2022.
 Denning, P.J.; Comer, D.E.; Gries, D.; Mulder, M.C.; Tucker, A.; Turner, A.J.; Young, P.R. (February 1989). "Computing as a discipline". Computer. 22 (2): 63–70. doi:10.1109/2.19833. ISSN 1558-0814. Archived from the original on March 3, 2022. Retrieved March 3, 2022.
 Harel, David (2014). Algorithmics The Spirit of Computing. Springer Berlin. ISBN 978-3-642-44135-6. OCLC 876384882. Archived from the original on June 17, 2020. Retrieved June 17, 2020.
 Patton, Richard D.; Patton, Peter C. (2009), Nof, Shimon Y. (ed.), "What Can be Automated? What Cannot be Automated?", Springer Handbook of Automation, Springer Handbooks, Berlin, Heidelberg: Springer, pp. 305–313, doi:10.1007/978-3-540-78831-7_18, ISBN 978-3-540-78831-7, archived from the original on January 11, 2023, retrieved March 3, 2022
 Forsythe, George (August 5–10, 1969). "Computer Science and Education". Proceedings of IFIP Congress 1968. The question 'What can be automated?' is one of the most inspiring philosophical and practical questions of contemporary civilization.
 Knuth, Donald E. (August 1, 1972). "George Forsythe and the development of computer science". Communications of the ACM. 15 (8): 721–726. doi:10.1145/361532.361538. ISSN 0001-0782. S2CID 12512057.
 Hanson, Vicki L. (January 23, 2017). "Celebrating 50 years of the Turing award". Communications of the ACM. 60 (2): 5. doi:10.1145/3033604. ISSN 0001-0782. S2CID 29984960. Archived from the original on March 3, 2022. Retrieved March 3, 2022.
 Scott, Eric; Martins, Marcella Scoczynski Ribeiro; Yafrani, Mohamed El; Volz, Vanessa; Wilson, Dennis G (June 5, 2018). "ACM marks 50 years of the ACM A.M. turing award and computing's greatest achievements". ACM SIGEVOlution. 10 (3): 9–11. doi:10.1145/3231560.3231563. S2CID 47021559.
 "2021: 375th birthday of Leibniz, father of computer science". people.idsia.ch. Archived from the original on September 21, 2022. Retrieved February 4, 2023.
 "Charles Babbage Institute: Who Was Charles Babbage?". cbi.umn.edu. Archived from the original on January 9, 2007. Retrieved December 28, 2016.
 "Ada Lovelace | Babbage Engine | Computer History Museum". www.computerhistory.org. Archived from the original on December 25, 2018. Retrieved December 28, 2016.
 "History of Computer Science". cs.uwaterloo.ca. Archived from the original on July 29, 2017. Retrieved July 15, 2022.
 "Wilhelm Schickard – Ein Computerpionier" (PDF) (in German). Archived from the original (PDF) on September 19, 2020. Retrieved December 4, 2016.
 Keates, Fiona (June 25, 2012). "A Brief History of Computing". The Repository. The Royal Society. Archived from the original on June 29, 2012. Retrieved January 19, 2014.
 "Science Museum, Babbage's Analytical Engine, 1834–1871 (Trial model)". Archived from the original on August 30, 2019. Retrieved May 11, 2020.
 Hyman, Anthony (1982). Charles Babbage: Pioneer of the Computer. Oxford University Press. ISBN 978-0691083032.
 "A Selection and Adaptation From Ada's Notes found in Ada, The Enchantress of Numbers," by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA". Archived from the original on February 10, 2006. Retrieved May 4, 2006.
 "The John Gabriel Byrne Computer Science Collection" (PDF). Archived from the original on April 16, 2019. Retrieved August 8, 2019.
 Torres Quevedo, L. (1914). "Ensayos sobre Automática – Su definicion. Extension teórica de sus aplicaciones". Revista de la Academia de Ciencias Exacta, 12, pp. 391–418.
 Torres Quevedo, Leonardo. Automática: Complemento de la Teoría de las Máquinas, (pdf), pp. 575-583, Revista de Obras Públicas, 19 November 1914.
 Ronald T. Kneusel. Numbers and Computers, Springer, pp. 84-85, 2017. ISBN 978-3319505084
 Randell, Brian. Digital Computers, History of Origins, (pdf), p. 545, Digital Computers: Origins, Encyclopedia of Computer Science, January 2003.
 Randell 1982, p. 6, 11–13.
 "In this sense Aiken needed IBM, whose technology included the use of punched cards, the accumulation of numerical data, and the transfer of numerical data from one register to another", Bernard Cohen, p.44 (2000)
 Brian Randell, p. 187, 1975
 The Association for Computing Machinery (ACM) was founded in 1947.
 "IBM Archives: 1945". Ibm.com. January 23, 2003. Archived from the original on January 5, 2019. Retrieved March 19, 2019.
 "IBM100 – The Origins of Computer Science". Ibm.com. September 15, 1995. Archived from the original on January 5, 2019. Retrieved March 19, 2019.
 "Some EDSAC statistics". University of Cambridge. Archived from the original on September 3, 2007. Retrieved November 19, 2011.
 "Computer science pioneer Samuel D. Conte dies at 85". Purdue Computer Science. July 1, 2002. Archived from the original on October 6, 2014. Retrieved December 12, 2014.
 Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. Taylor and Francis / CRC Press.
 Louis Fine (1960). "The Role of the University in Computers, Data Processing, and Related Fields". Communications of the ACM. 2 (9): 7–14. doi:10.1145/368424.368427. S2CID 6740821.
 "Stanford University Oral History". Stanford University. Archived from the original on April 4, 2017. Retrieved May 30, 2013.
 Donald Knuth (1972). "George Forsythe and the Development of Computer Science". Comms. ACM. Archived October 20, 2013, at the Wayback Machine
 Matti Tedre (2006). "The Development of Computer Science: A Sociocultural Perspective" (PDF). p. 260. Archived (PDF) from the original on October 9, 2022. Retrieved December 12, 2014.
 Peter Naur (1966). "The science of datalogy". Communications of the ACM. 9 (7): 485. doi:10.1145/365719.366510. S2CID 47558402.
 Weiss, E.A.; Corley, Henry P.T. "Letters to the editor". Communications of the ACM. 1 (4): 6. doi:10.1145/368796.368802. S2CID 5379449.
 Communications of the ACM 2(1):p.4
 IEEE Computer 28(12): p.136
 P. Mounier-Kuhn, L'Informatique en France, de la seconde guerre mondiale au Plan Calcul. L'émergence d'une science, Paris, PUPS, 2010, ch. 3 & 4.
 Groth, Dennis P. (February 2010). "Why an Informatics Degree?". Communications of the ACM. Cacm.acm.org. Archived from the original on January 11, 2023. Retrieved June 14, 2016.
 Tedre, M. (2011). "Computing as a Science: A Survey of Competing Viewpoints". Minds and Machines. 21 (3): 361–387. doi:10.1007/s11023-011-9240-4. S2CID 14263916.
 Parnas, D.L. (1998). "Software engineering programmes are not computer science programmes". Annals of Software Engineering. 6: 19–37. doi:10.1023/A:1018949113292. S2CID 35786237., p. 19: "Rather than treat software engineering as a subfield of computer science, I treat it as an element of the set, Civil Engineering, Mechanical Engineering, Chemical Engineering, Electrical Engineering, [...]"
 Luk, R.W.P. (2020). "Insight in how computer science can be a science". Science & Philosophy. 8 (2): 17–47. doi:10.23756/sp.v8i2.531.
 Knuth, D.E. (1974). "Computer science and its relation to mathematics". The American Mathematical Monthly. 81 (4): 323–343. doi:10.2307/2318994. JSTOR 2318994.
 "The Philosophy of Computer Science". The Philosophy of Computer Science (Stanford Encyclopedia of Philosophy). Metaphysics Research Lab, Stanford University. 2021. Archived from the original on September 16, 2021. Retrieved September 16, 2021.
 Wegner, P. (October 13–15, 1976). Research paradigms in computer science—Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA.
 Denning, Peter J. (2007). "Computing is a natural science". Communications of the ACM. 50 (7): 13–18. doi:10.1145/1272516.1272529. S2CID 20045303.
 Eden, A.H. (2007). "Three Paradigms of Computer Science" (PDF). Minds and Machines. 17 (2): 135–167. CiteSeerX 10.1.1.304.7763. doi:10.1007/s11023-007-9060-8. S2CID 3023076. Archived from the original (PDF) on February 15, 2016.
 Turner, Raymond; Angius, Nicola (2019). "The Philosophy of Computer Science". In Zalta, Edward N. (ed.). The Stanford Encyclopedia of Philosophy. Archived from the original on October 14, 2019. Retrieved October 14, 2019.
 "Computer Science as a Profession". Computing Sciences Accreditation Board. May 28, 1997. Archived from the original on June 17, 2008. Retrieved May 23, 2010.
 Committee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council (2004). Computer Science: Reflections on the Field, Reflections from the Field. National Academies Press. ISBN 978-0-309-09301-9. Archived from the original on February 18, 2011. Retrieved August 31, 2008.
 "CSAB Leading Computer Education". CSAB. August 3, 2011. Archived from the original on January 20, 2019. Retrieved November 19, 2011.
 Clay Mathematics Institute P = NP Archived October 14, 2013, at the Wayback Machine
 P. Collins, Graham (October 14, 2002). "Claude E. Shannon: Founder of Information Theory". Scientific American. Archived from the original on January 16, 2014. Retrieved December 12, 2014.
 Van-Nam Huynh; Vladik Kreinovich; Songsak Sriboonchitta; 2012. Uncertainty Analysis in Econometrics with Applications. Springer Science & Business Media. p. 63. ISBN 978-3-642-35443-4.
 Phillip A. Laplante, (2010). Encyclopedia of Software Engineering Three-Volume Set (Print). CRC Press. p. 309. ISBN 978-1-351-24926-3.
 Muhammad H. Rashid, (2016). SPICE for Power Electronics and Electric Power. CRC Press. p. 6. ISBN 978-1-4398-6047-2.
 "What is an integrated circuit (IC)? A vital component of modern electronics". WhatIs.com. Archived from the original on November 15, 2021. Retrieved November 15, 2021.
 A. Thisted, Ronald (April 7, 1997). "Computer Architecture" (PDF). The University of Chicago. Archived (PDF) from the original on October 9, 2022.
 Jiacun Wang, (2017). Real-Time Embedded Systems. Wiley. p. 12. ISBN 978-1-119-42070-5.
 Gordana Dodig-Crnkovic; Raffaela Giovagnoli, (2013). Computing Nature: Turing Centenary Perspective. Springer Science & Business Media. p. 247. ISBN 978-3-642-37225-4.
 Simon Elias Bibri (2018). Smart Sustainable Cities of the Future: The Untapped Potential of Big Data Analytics and Context-Aware Computing for Advancing Sustainability. Springer. p. 74. ISBN 978-3-319-73981-6.
 Katz, Jonathan (2008). Introduction to modern cryptography. Yehuda Lindell. Boca Raton: Chapman & Hall/CRC. ISBN 978-1-58488-551-1. OCLC 137325053. Archived from the original on May 6, 2022. Retrieved November 17, 2021.
 Rapaport, William J. (September 20, 2013). "What Is Computation?". State University of New York at Buffalo. Archived from the original on February 14, 2001. Retrieved August 31, 2013.
 B. Jack Copeland, (2012). Alan Turing's Electronic Brain: The Struggle to Build the ACE, the World's Fastest Computer. OUP Oxford. p. 107. ISBN 978-0-19-960915-4.
 Charles W. Herbert, (2010). An Introduction to Programming Using Alice 2.2. Cengage Learning. p. 122. ISBN 0-538-47866-7.
 Md. Rezaul Karim; Sridhar Alla, (2017). Scala and Spark for Big Data Analytics: Explore the concepts of functional programming, data streaming, and machine learning. Packt Publishing Ltd. p. 87. ISBN 978-1-78355-050-0.
 Lex Sheehan, (2017). Learning Functional Programming in Go: Change the way you approach your applications using functional programming in Go. Packt Publishing Ltd. p. 16. ISBN 978-1-78728-604-7.
 Evelio Padilla, (2015). Substation Automation Systems: Design and Implementation. Wiley. p. 245. ISBN 978-1-118-98730-8.
 "Multi-Paradigm Programming Language". developer.mozilla.org. Mozilla Foundation. Archived from the original on August 21, 2013.
 Meyer, Bertrand (April 2009). "Viewpoint: Research evaluation for computer science". Communications of the ACM. 25 (4): 31–34. doi:10.1145/1498765.1498780. S2CID 8625066.
 Patterson, David (August 1999). "Evaluating Computer Scientists and Engineers For Promotion and Tenure". Computing Research Association. Archived from the original on July 22, 2015. Retrieved July 19, 2015.
 Fortnow, Lance (August 2009). "Viewpoint: Time for Computer Science to Grow Up". Communications of the ACM. 52 (8): 33–35. doi:10.1145/1536616.1536631.
 Burns, Judith (April 3, 2016). "Computer science A-level 1970s style". Archived from the original on February 9, 2019. Retrieved February 9, 2019.
 Jones, Michael (October 1915). "Developing a Computer Science Curriculum in England: Exploring Approaches in the USA" (PDF). Winston Churchill Memorial Trust. Archived from the original (PDF) on October 22, 2016. Retrieved February 9, 2019.
 "Computer Science: Not Just an Elective Anymore". Education Week. February 25, 2014. Archived from the original on December 1, 2016. Retrieved July 20, 2015.
 Wilson, Cameron; Sudol, Leigh Ann; Stephenson, Chris; Stehlik, Mark (2010). "Running on Empty: The Failure to Teach K–12 Computer Science in the Digital Age" (PDF). ACM. Archived (PDF) from the original on June 12, 2013. Retrieved July 20, 2015.
 "2021 State of computer science education: Accelerating action through advocacy" (PDF). Code.org, CSTA, & ECEP Alliance. 2021. Archived (PDF) from the original on October 9, 2022.
 "A is for algorithm". The Economist. April 26, 2014. Archived from the original on October 18, 2017. Retrieved August 26, 2017.
 "Computing at School International comparisons" (PDF). Archived from the original (PDF) on May 8, 2013. Retrieved July 20, 2015.
 "Adding Coding to the Curriculum". The New York Times. March 23, 2014. Archived from the original on January 1, 2022.
Further reading
Tucker, Allen B. (2004). Computer Science Handbook (2nd ed.). Chapman and Hall/CRC. ISBN 978-1-58488-360-9.
Ralston, Anthony; Reilly, Edwin D.; Hemmendinger, David (2000). Encyclopedia of Computer Science (4th ed.). Grove's Dictionaries. ISBN 978-1-56159-248-7. Archived from the original on June 8, 2020. Retrieved February 6, 2011.
Edwin D. Reilly (2003). Milestones in Computer Science and Information Technology. Greenwood Publishing Group. ISBN 978-1-57356-521-9.
Knuth, Donald E. (1996). Selected Papers on Computer Science. CSLI Publications, Cambridge University Press.
Collier, Bruce (1990). The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing Inc. ISBN 978-0-8240-0043-1. Archived from the original on January 20, 2007. Retrieved May 4, 2013.
Cohen, Bernard (2000). Howard Aiken, Portrait of a computer pioneer. The MIT press. ISBN 978-0-262-53179-5.
Tedre, Matti (2014). The Science of Computing: Shaping a Discipline. CRC Press, Taylor & Francis.
Randell, Brian (1973). The origins of Digital computers, Selected Papers. Springer-Verlag. ISBN 978-3-540-06169-4.
Randell, Brian (October–December 1982). "From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush" (PDF). IEEE Annals of the History of Computing. 4 (4): 327–341. doi:10.1109/mahc.1982.10042. S2CID 1737953. Archived from the original (PDF) on September 21, 2013.
Peter J. Denning. Is computer science science?, Communications of the ACM, April 2005.
Peter J. Denning, Great principles in computing curricula, Technical Symposium on Computer Science Education, 2004.

A computer is a machine that can be programmed to carry out sequences of arithmetic or logical operations (computation) automatically. Modern digital electronic computers can perform generic sets of operations known as programs. These programs enable computers to perform a wide range of tasks. The term computer system may refer to a nominally complete computer that includes the hardware, operating system, software, and peripheral equipment needed and used for full operation; or to a group of computers that are linked and function together, such as a computer network or computer cluster.

A broad range of industrial and consumer products use computers as control systems. Simple special-purpose devices like microwave ovens and remote controls are included, as are factory devices like industrial robots and computer-aided design, as well as general-purpose devices such as personal computers and mobile devices such as smartphones. Computers power the Internet, which links billions of computers and users.

Early computers were meant to be used only for calculations. Simple manual instruments like the abacus have aided people in doing calculations since ancient times. Early in the Industrial Revolution, some mechanical devices were built to automate long, tedious tasks, such as guiding patterns for looms. More sophisticated electrical machines did specialized analog calculations in the early 20th century. The first digital electronic calculating machines were developed during World War II, both electromechanical and using thermionic valves. The first semiconductor transistors in the late 1940s were followed by the silicon-based MOSFET (MOS transistor) and monolithic integrated circuit chip technologies in the late 1950s, leading to the microprocessor and the microcomputer revolution in the 1970s. The speed, power and versatility of computers have been increasing dramatically ever since then, with transistor counts increasing at a rapid pace (Moore's law noted that counts doubled every two years), leading to the Digital Revolution during the late 20th to early 21st centuries.

Conventionally, a modern computer consists of at least one processing element, typically a central processing unit (CPU) in the form of a microprocessor, together with some type of computer memory, typically semiconductor memory chips. The processing element carries out arithmetic and logical operations, and a sequencing and control unit can change the order of operations in response to stored information. Peripheral devices include input devices (keyboards, mice, joystick, etc.), output devices (monitor screens, printers, etc.), and input/output devices that perform both functions (e.g., the 2000s-era touchscreen). Peripheral devices allow information to be retrieved from an external source and they enable the result of operations to be saved and retrieved.

Etymology
A human computer.
A human computer, with microscope and calculator, 1952
According to the Oxford English Dictionary, the first known use of computer was in a 1613 book called The Yong Mans Gleanings by the English writer Richard Brathwait: "I haue [sic] read the truest computer of Times, and the best Arithmetician that euer [sic] breathed, and he reduceth thy dayes into a short number." This usage of the term referred to a human computer, a person who carried out calculations or computations. The word continued with the same meaning until the middle of the 20th century. During the latter part of this period women were often hired as computers because they could be paid less than their male counterparts.[1] By 1943, most human computers were women.[2]

The Online Etymology Dictionary gives the first attested use of computer in the 1640s, meaning 'one who calculates'; this is an "agent noun from compute (v.)". The Online Etymology Dictionary states that the use of the term to mean "'calculating machine' (of any type) is from 1897." The Online Etymology Dictionary indicates that the "modern use" of the term, to mean 'programmable digital electronic computer' dates from "1945 under this name; [in a] theoretical [sense] from 1937, as Turing machine".[3]

History
Main articles: History of computing and History of computing hardware
For a chronological guide, see Timeline of computing.
Pre-20th century

The Ishango bone, a bone tool dating back to prehistoric Africa
Devices have been used to aid computation for thousands of years, mostly using one-to-one correspondence with fingers. The earliest counting device was most likely a form of tally stick. Later record keeping aids throughout the Fertile Crescent included calculi (clay spheres, cones, etc.) which represented counts of items, likely livestock or grains, sealed in hollow unbaked clay containers.[a][4] The use of counting rods is one example.


The Chinese suanpan (算盘). The number represented on this abacus is 6,302,715,408.
The abacus was initially used for arithmetic tasks. The Roman abacus was developed from devices used in Babylonia as early as 2400 BCE. Since then, many other forms of reckoning boards or tables have been invented. In a medieval European counting house, a checkered cloth would be placed on a table, and markers moved around on it according to certain rules, as an aid to calculating sums of money.[5]


The Antikythera mechanism, dating back to ancient Greece circa 150–100 BCE, is an early analog computing device.
The Antikythera mechanism is believed to be the earliest known mechanical analog computer, according to Derek J. de Solla Price.[6] It was designed to calculate astronomical positions. It was discovered in 1901 in the Antikythera wreck off the Greek island of Antikythera, between Kythera and Crete, and has been dated to approximately c. 100 BCE. Devices of comparable complexity to the Antikythera mechanism would not reappear until the fourteenth century.[7]

Many mechanical aids to calculation and measurement were constructed for astronomical and navigation use. The planisphere was a star chart invented by Abū Rayhān al-Bīrūnī in the early 11th century.[8] The astrolabe was invented in the Hellenistic world in either the 1st or 2nd centuries BCE and is often attributed to Hipparchus. A combination of the planisphere and dioptra, the astrolabe was effectively an analog computer capable of working out several different kinds of problems in spherical astronomy. An astrolabe incorporating a mechanical calendar computer[9][10] and gear-wheels was invented by Abi Bakr of Isfahan, Persia in 1235.[11] Abū Rayhān al-Bīrūnī invented the first mechanical geared lunisolar calendar astrolabe,[12] an early fixed-wired knowledge processing machine[13] with a gear train and gear-wheels,[14] c. 1000 AD.

The sector, a calculating instrument used for solving problems in proportion, trigonometry, multiplication and division, and for various functions, such as squares and cube roots, was developed in the late 16th century and found application in gunnery, surveying and navigation.

The planimeter was a manual instrument to calculate the area of a closed figure by tracing over it with a mechanical linkage.


A slide rule
The slide rule was invented around 1620–1630 by the English clergyman William Oughtred, shortly after the publication of the concept of the logarithm. It is a hand-operated analog computer for doing multiplication and division. As slide rule development progressed, added scales provided reciprocals, squares and square roots, cubes and cube roots, as well as transcendental functions such as logarithms and exponentials, circular and hyperbolic trigonometry and other functions. Slide rules with special scales are still used for quick performance of routine calculations, such as the E6B circular slide rule used for time and distance calculations on light aircraft.

In the 1770s, Pierre Jaquet-Droz, a Swiss watchmaker, built a mechanical doll (automaton) that could write holding a quill pen. By switching the number and order of its internal wheels different letters, and hence different messages, could be produced. In effect, it could be mechanically "programmed" to read instructions. Along with two other complex machines, the doll is at the Musée d'Art et d'Histoire of Neuchâtel, Switzerland, and still operates.[15]

In 1831–1835, mathematician and engineer Giovanni Plana devised a Perpetual Calendar machine, which, through a system of pulleys and cylinders and over, could predict the perpetual calendar for every year from 0 CE (that is, 1 BCE) to 4000 CE, keeping track of leap years and varying day length. The tide-predicting machine invented by the Scottish scientist Sir William Thomson in 1872 was of great utility to navigation in shallow waters. It used a system of pulleys and wires to automatically calculate predicted tide levels for a set period at a particular location.

The differential analyser, a mechanical analog computer designed to solve differential equations by integration, used wheel-and-disc mechanisms to perform the integration. In 1876, Sir William Thomson had already discussed the possible construction of such calculators, but he had been stymied by the limited output torque of the ball-and-disk integrators.[16] In a differential analyzer, the output of one integrator drove the input of the next integrator, or a graphing output. The torque amplifier was the advance that allowed these machines to work. Starting in the 1920s, Vannevar Bush and others developed mechanical differential analyzers.

In the 1890s, the Spanish engineer Leonardo Torres Quevedo began to develop a series of advanced analog machines that could solve real and complex roots of polynomials,[17][18][19][20] which were published in 1901 by the Paris Academy of Sciences.[21]

First computer

Charles Babbage c. 1850

A diagram of a portion of Babbage's Difference engine

The Difference Engine Number 2 at the Intellectual Ventures laboratory in Seattle
Charles Babbage, an English mechanical engineer and polymath, originated the concept of a programmable computer. Considered the "father of the computer",[22] he conceptualized and invented the first mechanical computer in the early 19th century.

After working on his difference engine he announced his invention in 1822, in a paper to the Royal Astronomical Society, titled "Note on the application of machinery to the computation of astronomical and mathematical tables",[23] he also designed to aid in navigational calculations, in 1833 he realized that a much more general design, an analytical engine, was possible. The input of programs and data was to be provided to the machine via punched cards, a method being used at the time to direct mechanical looms such as the Jacquard loom. For output, the machine would have a printer, a curve plotter and a bell. The machine would also be able to punch numbers onto cards to be read in later. The Engine incorporated an arithmetic logic unit, control flow in the form of conditional branching and loops, and integrated memory, making it the first design for a general-purpose computer that could be described in modern terms as Turing-complete.[24][25]

The machine was about a century ahead of its time. All the parts for his machine had to be made by hand – this was a major problem for a device with thousands of parts. Eventually, the project was dissolved with the decision of the British Government to cease funding. Babbage's failure to complete the analytical engine can be chiefly attributed to political and financial difficulties as well as his desire to develop an increasingly sophisticated computer and to move ahead faster than anyone else could follow. Nevertheless, his son, Henry Babbage, completed a simplified version of the analytical engine's computing unit (the mill) in 1888. He gave a successful demonstration of its use in computing tables in 1906.

Electromechanical calculating machine

Electro-mechanical calculator (1920) by Leonardo Torres Quevedo.
In his work Essays on Automatics published in 1914, Leonardo Torres Quevedo wrote a brief history of Babbage's efforts at constructing a mechanical Difference Engine and Analytical Engine. He described the Analytical Engine as exemplifying his theories about the potential power of machines, and takes the problem of designing such an engine as a challenge to his skills as an inventor of electromechanical devices. The paper contains a design of a machine capable of calculating completely automatically the value of the formula
�
�
(
�
−
�
)
2
{\displaystyle a^{x}(y-z)^{2}}, for a sequence of sets of values of the variables involved. The whole machine was to be controlled by a read-only program, which was complete with provisions for conditional branching. He also introduced the idea of floating-point arithmetic.[26][27][28] In 1920, to celebrate the 100th anniversary of the invention of the arithmometer, Torres presented in Paris the Electromechanical Arithmometer, which consisted of an arithmetic unit connected to a (possibly remote) typewriter, on which commands could be typed and the results printed automatically,[29][30][31] demonstrating the feasibility of an electromechanical analytical engine.[32]

Analog computers
Main article: Analog computer

Sir William Thomson's third tide-predicting machine design, 1879–81
During the first half of the 20th century, many scientific computing needs were met by increasingly sophisticated analog computers, which used a direct mechanical or electrical model of the problem as a basis for computation. However, these were not programmable and generally lacked the versatility and accuracy of modern digital computers.[33] The first modern analog computer was a tide-predicting machine, invented by Sir William Thomson (later to become Lord Kelvin) in 1872. The differential analyser, a mechanical analog computer designed to solve differential equations by integration using wheel-and-disc mechanisms, was conceptualized in 1876 by James Thomson, the elder brother of the more famous Sir William Thomson.[16]

The art of mechanical analog computing reached its zenith with the differential analyzer, built by H. L. Hazen and Vannevar Bush at MIT starting in 1927. This built on the mechanical integrators of James Thomson and the torque amplifiers invented by H. W. Nieman. A dozen of these devices were built before their obsolescence became obvious. By the 1950s, the success of digital electronic computers had spelled the end for most analog computing machines, but analog computers remained in use during the 1950s in some specialized applications such as education (slide rule) and aircraft (control systems).

Digital computers
Electromechanical
By 1938, the United States Navy had developed an electromechanical analog computer small enough to use aboard a submarine. This was the Torpedo Data Computer, which used trigonometry to solve the problem of firing a torpedo at a moving target. During World War II similar devices were developed in other countries as well.


Replica of Konrad Zuse's Z3, the first fully automatic, digital (electromechanical) computer
Early digital computers were electromechanical; electric switches drove mechanical relays to perform the calculation. These devices had a low operating speed and were eventually superseded by much faster all-electric computers, originally using vacuum tubes. The Z2, created by German engineer Konrad Zuse in 1939 in Berlin, was one of the earliest examples of an electromechanical relay computer.[34]


Konrad Zuse, inventor of the modern computer[35][36]
In 1941, Zuse followed his earlier machine up with the Z3, the world's first working electromechanical programmable, fully automatic digital computer.[37][38] The Z3 was built with 2000 relays, implementing a 22 bit word length that operated at a clock frequency of about 5–10 Hz.[39] Program code was supplied on punched film while data could be stored in 64 words of memory or supplied from the keyboard. It was quite similar to modern machines in some respects, pioneering numerous advances such as floating-point numbers. Rather than the harder-to-implement decimal system (used in Charles Babbage's earlier design), using a binary system meant that Zuse's machines were easier to build and potentially more reliable, given the technologies available at that time.[40] The Z3 was not itself a universal computer but could be extended to be Turing complete.[41][42]

Zuse's next computer, the Z4, became the world's first commercial computer; after initial delay due to the Second World War, it was completed in 1950 and delivered to the ETH Zurich.[43] The computer was manufactured by Zuse's own company, Zuse KG, which was founded in 1941 as the first company with the sole purpose of developing computers in Berlin.[43]

Vacuum tubes and digital electronic circuits
Purely electronic circuit elements soon replaced their mechanical and electromechanical equivalents, at the same time that digital calculation replaced analog. The engineer Tommy Flowers, working at the Post Office Research Station in London in the 1930s, began to explore the possible use of electronics for the telephone exchange. Experimental equipment that he built in 1934 went into operation five years later, converting a portion of the telephone exchange network into an electronic data processing system, using thousands of vacuum tubes.[33] In the US, John Vincent Atanasoff and Clifford E. Berry of Iowa State University developed and tested the Atanasoff–Berry Computer (ABC) in 1942,[44] the first "automatic electronic digital computer".[45] This design was also all-electronic and used about 300 vacuum tubes, with capacitors fixed in a mechanically rotating drum for memory.[46]

Two women are seen by the Colossus computer.
Colossus, the first electronic digital programmable computing device, was used to break German ciphers during World War II. It is seen here in use at Bletchley Park in 1943.
During World War II, the British code-breakers at Bletchley Park achieved a number of successes at breaking encrypted German military communications. The German encryption machine, Enigma, was first attacked with the help of the electro-mechanical bombes which were often run by women.[47][48] To crack the more sophisticated German Lorenz SZ 40/42 machine, used for high-level Army communications, Max Newman and his colleagues commissioned Flowers to build the Colossus.[46] He spent eleven months from early February 1943 designing and building the first Colossus.[49] After a functional test in December 1943, Colossus was shipped to Bletchley Park, where it was delivered on 18 January 1944[50] and attacked its first message on 5 February.[46]

Colossus was the world's first electronic digital programmable computer.[33] It used a large number of valves (vacuum tubes). It had paper-tape input and was capable of being configured to perform a variety of boolean logical operations on its data, but it was not Turing-complete. Nine Mk II Colossi were built (The Mk I was converted to a Mk II making ten machines in total). Colossus Mark I contained 1,500 thermionic valves (tubes), but Mark II with 2,400 valves, was both five times faster and simpler to operate than Mark I, greatly speeding the decoding process.[51][52]


ENIAC was the first electronic, Turing-complete device, and performed ballistics trajectory calculations for the United States Army.
The ENIAC[53] (Electronic Numerical Integrator and Computer) was the first electronic programmable computer built in the U.S. Although the ENIAC was similar to the Colossus, it was much faster, more flexible, and it was Turing-complete. Like the Colossus, a "program" on the ENIAC was defined by the states of its patch cables and switches, a far cry from the stored program electronic machines that came later. Once a program was written, it had to be mechanically set into the machine with manual resetting of plugs and switches. The programmers of the ENIAC were six women, often known collectively as the "ENIAC girls".[54][55]

It combined the high speed of electronics with the ability to be programmed for many complex problems. It could add or subtract 5000 times a second, a thousand times faster than any other machine. It also had modules to multiply, divide, and square root. High speed memory was limited to 20 words (about 80 bytes). Built under the direction of John Mauchly and J. Presper Eckert at the University of Pennsylvania, ENIAC's development and construction lasted from 1943 to full operation at the end of 1945. The machine was huge, weighing 30 tons, using 200 kilowatts of electric power and contained over 18,000 vacuum tubes, 1,500 relays, and hundreds of thousands of resistors, capacitors, and inductors.[56]

Modern computers
Concept of modern computer
The principle of the modern computer was proposed by Alan Turing in his seminal 1936 paper,[57] On Computable Numbers. Turing proposed a simple device that he called "Universal Computing machine" and that is now known as a universal Turing machine. He proved that such a machine is capable of computing anything that is computable by executing instructions (program) stored on tape, allowing the machine to be programmable. The fundamental concept of Turing's design is the stored program, where all the instructions for computing are stored in memory. Von Neumann acknowledged that the central concept of the modern computer was due to this paper.[58] Turing machines are to this day a central object of study in theory of computation. Except for the limitations imposed by their finite memory stores, modern computers are said to be Turing-complete, which is to say, they have algorithm execution capability equivalent to a universal Turing machine.

Stored programs
Main article: Stored-program computer
Three tall racks containing electronic circuit boards
A section of the reconstructed Manchester Baby, the first electronic stored-program computer
Early computing machines had fixed programs. Changing its function required the re-wiring and re-structuring of the machine.[46] With the proposal of the stored-program computer this changed. A stored-program computer includes by design an instruction set and can store in memory a set of instructions (a program) that details the computation. The theoretical basis for the stored-program computer was laid out by Alan Turing in his 1936 paper. In 1945, Turing joined the National Physical Laboratory and began work on developing an electronic stored-program digital computer. His 1945 report "Proposed Electronic Calculator" was the first specification for such a device. John von Neumann at the University of Pennsylvania also circulated his First Draft of a Report on the EDVAC in 1945.[33]

The Manchester Baby was the world's first stored-program computer. It was built at the University of Manchester in England by Frederic C. Williams, Tom Kilburn and Geoff Tootill, and ran its first program on 21 June 1948.[59] It was designed as a testbed for the Williams tube, the first random-access digital storage device.[60] Although the computer was described as "small and primitive" by a 1998 retrospective, it was the first working machine to contain all of the elements essential to a modern electronic computer.[61] As soon as the Baby had demonstrated the feasibility of its design, a project began at the university to develop it into a practically useful computer, the Manchester Mark 1.

The Mark 1 in turn quickly became the prototype for the Ferranti Mark 1, the world's first commercially available general-purpose computer.[62] Built by Ferranti, it was delivered to the University of Manchester in February 1951. At least seven of these later machines were delivered between 1953 and 1957, one of them to Shell labs in Amsterdam.[63] In October 1947 the directors of British catering company J. Lyons & Company decided to take an active role in promoting the commercial development of computers. Lyons's LEO I computer, modelled closely on the Cambridge EDSAC of 1949, became operational in April 1951[64] and ran the world's first routine office computer job.

Grace Hopper was the first to develop a compiler for a programming language.[2]

Transistors
Main articles: Transistor and History of the transistor
Further information: Transistor computer and MOSFET

Bipolar junction transistor (BJT)
The concept of a field-effect transistor was proposed by Julius Edgar Lilienfeld in 1925. John Bardeen and Walter Brattain, while working under William Shockley at Bell Labs, built the first working transistor, the point-contact transistor, in 1947, which was followed by Shockley's bipolar junction transistor in 1948.[65][66] From 1955 onwards, transistors replaced vacuum tubes in computer designs, giving rise to the "second generation" of computers. Compared to vacuum tubes, transistors have many advantages: they are smaller, and require less power than vacuum tubes, so give off less heat. Junction transistors were much more reliable than vacuum tubes and had longer, indefinite, service life. Transistorized computers could contain tens of thousands of binary logic circuits in a relatively compact space. However, early junction transistors were relatively bulky devices that were difficult to manufacture on a mass-production basis, which limited them to a number of specialized applications.[67]

At the University of Manchester, a team under the leadership of Tom Kilburn designed and built a machine using the newly developed transistors instead of valves.[68] Their first transistorized computer and the first in the world, was operational by 1953, and a second version was completed there in April 1955. However, the machine did make use of valves to generate its 125 kHz clock waveforms and in the circuitry to read and write on its magnetic drum memory, so it was not the first completely transistorized computer. That distinction goes to the Harwell CADET of 1955,[69] built by the electronics division of the Atomic Energy Research Establishment at Harwell.[69][70]


MOSFET (MOS transistor), showing gate (G), body (B), source (S) and drain (D) terminals. The gate is separated from the body by an insulating layer (pink).
The metal–oxide–silicon field-effect transistor (MOSFET), also known as the MOS transistor, was invented by Mohamed M. Atalla and Dawon Kahng at Bell Labs in 1959.[71] It was the first truly compact transistor that could be miniaturized and mass-produced for a wide range of uses.[67] With its high scalability,[72] and much lower power consumption and higher density than bipolar junction transistors,[73] the MOSFET made it possible to build high-density integrated circuits.[74][75] In addition to data processing, it also enabled the practical use of MOS transistors as memory cell storage elements, leading to the development of MOS semiconductor memory, which replaced earlier magnetic-core memory in computers. The MOSFET led to the microcomputer revolution,[76] and became the driving force behind the computer revolution.[77][78] The MOSFET is the most widely used transistor in computers,[79][80] and is the fundamental building block of digital electronics.[81]

Integrated circuits
Main articles: Integrated circuit and Invention of the integrated circuit
Further information: Planar process and Microprocessor

Integrated circuits are typically packaged in plastic, metal, or ceramic cases to protect the IC from damage and for ease of assembly.
The next great advance in computing power came with the advent of the integrated circuit (IC). The idea of the integrated circuit was first conceived by a radar scientist working for the Royal Radar Establishment of the Ministry of Defence, Geoffrey W.A. Dummer. Dummer presented the first public description of an integrated circuit at the Symposium on Progress in Quality Electronic Components in Washington, D.C., on 7 May 1952.[82]

The first working ICs were invented by Jack Kilby at Texas Instruments and Robert Noyce at Fairchild Semiconductor.[83] Kilby recorded his initial ideas concerning the integrated circuit in July 1958, successfully demonstrating the first working integrated example on 12 September 1958.[84] In his patent application of 6 February 1959, Kilby described his new device as "a body of semiconductor material ... wherein all the components of the electronic circuit are completely integrated".[85][86] However, Kilby's invention was a hybrid integrated circuit (hybrid IC), rather than a monolithic integrated circuit (IC) chip.[87] Kilby's IC had external wire connections, which made it difficult to mass-produce.[88]

Noyce also came up with his own idea of an integrated circuit half a year later than Kilby.[89] Noyce's invention was the first true monolithic IC chip.[90][88] His chip solved many practical problems that Kilby's had not. Produced at Fairchild Semiconductor, it was made of silicon, whereas Kilby's chip was made of germanium. Noyce's monolithic IC was fabricated using the planar process, developed by his colleague Jean Hoerni in early 1959. In turn, the planar process was based on Mohamed M. Atalla's work on semiconductor surface passivation by silicon dioxide in the late 1950s.[91][92][93]

Modern monolithic ICs are predominantly MOS (metal–oxide–semiconductor) integrated circuits, built from MOSFETs (MOS transistors).[94] The earliest experimental MOS IC to be fabricated was a 16-transistor chip built by Fred Heiman and Steven Hofstein at RCA in 1962.[95] General Microelectronics later introduced the first commercial MOS IC in 1964,[96] developed by Robert Norman.[95] Following the development of the self-aligned gate (silicon-gate) MOS transistor by Robert Kerwin, Donald Klein and John Sarace at Bell Labs in 1967, the first silicon-gate MOS IC with self-aligned gates was developed by Federico Faggin at Fairchild Semiconductor in 1968.[97] The MOSFET has since become the most critical device component in modern ICs.[94]


Die photograph of a MOS 6502, an early 1970s microprocessor integrating 3500 transistors on a single chip
The development of the MOS integrated circuit led to the invention of the microprocessor,[98][99] and heralded an explosion in the commercial and personal use of computers. While the subject of exactly which device was the first microprocessor is contentious, partly due to lack of agreement on the exact definition of the term "microprocessor", it is largely undisputed that the first single-chip microprocessor was the Intel 4004,[100] designed and realized by Federico Faggin with his silicon-gate MOS IC technology,[98] along with Ted Hoff, Masatoshi Shima and Stanley Mazor at Intel.[b][102] In the early 1970s, MOS IC technology enabled the integration of more than 10,000 transistors on a single chip.[75]

System on a Chip (SoCs) are complete computers on a microchip (or chip) the size of a coin.[103] They may or may not have integrated RAM and flash memory. If not integrated, the RAM is usually placed directly above (known as Package on package) or below (on the opposite side of the circuit board) the SoC, and the flash memory is usually placed right next to the SoC, this all done to improve data transfer speeds, as the data signals do not have to travel long distances. Since ENIAC in 1945, computers have advanced enormously, with modern SoCs (Such as the Snapdragon 865) being the size of a coin while also being hundreds of thousands of times more powerful than ENIAC, integrating billions of transistors, and consuming only a few watts of power.

Mobile computers
The first mobile computers were heavy and ran from mains power. The 50 lb (23 kg) IBM 5100 was an early example. Later portables such as the Osborne 1 and Compaq Portable were considerably lighter but still needed to be plugged in. The first laptops, such as the Grid Compass, removed this requirement by incorporating batteries – and with the continued miniaturization of computing resources and advancements in portable battery life, portable computers grew in popularity in the 2000s.[104] The same developments allowed manufacturers to integrate computing resources into cellular mobile phones by the early 2000s.

These smartphones and tablets run on a variety of operating systems and recently became the dominant computing device on the market.[105] These are powered by System on a Chip (SoCs), which are complete computers on a microchip the size of a coin.[103]

Types
See also: Classes of computers
Computers can be classified in a number of different ways, including:

By architecture
Analog computer
Digital computer
Hybrid computer
Harvard architecture
Von Neumann architecture
Complex instruction set computer
Reduced instruction set computer
By size, form-factor and purpose
Supercomputer
Mainframe computer
Minicomputer (term no longer used),[106] Midrange computer
Server
Rackmount server
Blade server
Tower server
Personal computer
Workstation
Microcomputer (term no longer used)[107]
Home computer (term fallen into disuse)[108]
Desktop computer
Tower desktop
Slimline desktop
Multimedia computer (non-linear editing system computers, video editing PCs and the like, this term is no longer used)[109]
Gaming computer
All-in-one PC
Nettop (Small form factor PCs, Mini PCs)
Home theater PC
Keyboard computer
Portable computer
Thin client
Internet appliance
Laptop
Desktop replacement computer
Gaming laptop
Rugged laptop
2-in-1 PC
Ultrabook
Chromebook
Subnotebook
Netbook
Mobile computers:
Tablet computer
Smartphone
Ultra-mobile PC
Pocket PC
Palmtop PC
Handheld PC
Wearable computer
Smartwatch
Smartglasses
Single-board computer
Plug computer
Stick PC
Programmable logic controller
Computer-on-module
System on module
System in a package
System-on-chip (Also known as an Application Processor or AP if it lacks circuitry such as radio circuitry)
Microcontroller
Hardware
Main articles: Computer hardware, Personal computer hardware, Central processing unit, and Microprocessor
Video demonstrating the standard components of a "slimline" computer
The term hardware covers all of those parts of a computer that are tangible physical objects. Circuits, computer chips, graphic cards, sound cards, memory (RAM), motherboard, displays, power supplies, cables, keyboards, printers and "mice" input devices are all hardware.

History of computing hardware
Main article: History of computing hardware
First generation
(mechanical/electromechanical)	Calculators	Pascal's calculator, Arithmometer, Difference engine, Quevedo's analytical machines
Programmable devices	Jacquard loom, Analytical engine, IBM ASCC/Harvard Mark I, Harvard Mark II, IBM SSEC, Z1, Z2, Z3
Second generation
(vacuum tubes)	Calculators	Atanasoff–Berry Computer, IBM 604, UNIVAC 60, UNIVAC 120
Programmable devices	Colossus, ENIAC, Manchester Baby, EDSAC, Manchester Mark 1, Ferranti Pegasus, Ferranti Mercury, CSIRAC, EDVAC, UNIVAC I, IBM 701, IBM 702, IBM 650, Z22
Third generation
(discrete transistors and SSI, MSI, LSI integrated circuits)	Mainframes	IBM 7090, IBM 7080, IBM System/360, BUNCH
Minicomputer	HP 2116A, IBM System/32, IBM System/36, LINC, PDP-8, PDP-11
Desktop Computer	HP 9100
Fourth generation
(VLSI integrated circuits)	Minicomputer	VAX, IBM AS/400
4-bit microcomputer	Intel 4004, Intel 4040
8-bit microcomputer	Intel 8008, Intel 8080, Motorola 6800, Motorola 6809, MOS Technology 6502, Zilog Z80
16-bit microcomputer	Intel 8088, Zilog Z8000, WDC 65816/65802
32-bit microcomputer	Intel 80386, Pentium, Motorola 68000, ARM
64-bit microcomputer[c]	Alpha, MIPS, PA-RISC, PowerPC, SPARC, x86-64, ARMv8-A
Embedded computer	Intel 8048, Intel 8051
Personal computer	Desktop computer, Home computer, Laptop computer, Personal digital assistant (PDA), Portable computer, Tablet PC, Wearable computer
Theoretical/experimental	Quantum computer	IBM Q System One
Chemical computer
DNA computing
Optical computer
Spintronics-based computer
Wetware/Organic computer
Other hardware topics
Peripheral device (input/output)	Input	Mouse, keyboard, joystick, image scanner, webcam, graphics tablet, microphone
Output	Monitor, printer, loudspeaker
Both	Floppy disk drive, hard disk drive, optical disc drive, teleprinter
Computer buses	Short range	RS-232, SCSI, PCI, USB
Long range (computer networking)	Ethernet, ATM, FDDI
A general-purpose computer has four main components: the arithmetic logic unit (ALU), the control unit, the memory, and the input and output devices (collectively termed I/O). These parts are interconnected by buses, often made of groups of wires. Inside each of these parts are thousands to trillions of small electrical circuits which can be turned off or on by means of an electronic switch. Each circuit represents a bit (binary digit) of information so that when the circuit is on it represents a "1", and when off it represents a "0" (in positive logic representation). The circuits are arranged in logic gates so that one or more of the circuits may control the state of one or more of the other circuits.

Input devices
When unprocessed data is sent to the computer with the help of input devices, the data is processed and sent to output devices. The input devices may be hand-operated or automated. The act of processing is mainly regulated by the CPU. Some examples of input devices are:

Computer keyboard
Digital camera
Digital video
Graphics tablet
Image scanner
Joystick
Microphone
Mouse
Overlay keyboard
Real-time clock
Trackball
Touchscreen
Light pen
Output devices
The means through which computer gives output are known as output devices. Some examples of output devices are:

Computer monitor
Printer
PC speaker
Projector
Sound card
Video card
Control unit
Main articles: CPU design and Control unit

Diagram showing how a particular MIPS architecture instruction would be decoded by the control system
The control unit (often called a control system or central controller) manages the computer's various components; it reads and interprets (decodes) the program instructions, transforming them into control signals that activate other parts of the computer.[d] Control systems in advanced computers may change the order of execution of some instructions to improve performance.

A key component common to all CPUs is the program counter, a special memory cell (a register) that keeps track of which location in memory the next instruction is to be read from.[e]

The control system's function is as follows— this is a simplified description, and some of these steps may be performed concurrently or in a different order depending on the type of CPU:

Read the code for the next instruction from the cell indicated by the program counter.
Decode the numerical code for the instruction into a set of commands or signals for each of the other systems.
Increment the program counter so it points to the next instruction.
Read whatever data the instruction requires from cells in memory (or perhaps from an input device). The location of this required data is typically stored within the instruction code.
Provide the necessary data to an ALU or register.
If the instruction requires an ALU or specialized hardware to complete, instruct the hardware to perform the requested operation.
Write the result from the ALU back to a memory location or to a register or perhaps an output device.
Jump back to step (1).
Since the program counter is (conceptually) just another set of memory cells, it can be changed by calculations done in the ALU. Adding 100 to the program counter would cause the next instruction to be read from a place 100 locations further down the program. Instructions that modify the program counter are often known as "jumps" and allow for loops (instructions that are repeated by the computer) and often conditional instruction execution (both examples of control flow).

The sequence of operations that the control unit goes through to process an instruction is in itself like a short computer program, and indeed, in some more complex CPU designs, there is another yet smaller computer called a microsequencer, which runs a microcode program that causes all of these events to happen.

Central processing unit (CPU)
Main articles: Central processing unit and Microprocessor
The control unit, ALU, and registers are collectively known as a central processing unit (CPU). Early CPUs were composed of many separate components. Since the 1970s, CPUs have typically been constructed on a single MOS integrated circuit chip called a microprocessor.

Arithmetic logic unit (ALU)
Main article: Arithmetic logic unit
The ALU is capable of performing two classes of operations: arithmetic and logic.[110] The set of arithmetic operations that a particular ALU supports may be limited to addition and subtraction, or might include multiplication, division, trigonometry functions such as sine, cosine, etc., and square roots. Some can operate only on whole numbers (integers) while others use floating point to represent real numbers, albeit with limited precision. However, any computer that is capable of performing just the simplest operations can be programmed to break down the more complex operations into simple steps that it can perform. Therefore, any computer can be programmed to perform any arithmetic operation—although it will take more time to do so if its ALU does not directly support the operation. An ALU may also compare numbers and return Boolean truth values (true or false) depending on whether one is equal to, greater than or less than the other ("is 64 greater than 65?"). Logic operations involve Boolean logic: AND, OR, XOR, and NOT. These can be useful for creating complicated conditional statements and processing Boolean logic.

Superscalar computers may contain multiple ALUs, allowing them to process several instructions simultaneously.[111] Graphics processors and computers with SIMD and MIMD features often contain ALUs that can perform arithmetic on vectors and matrices.

Memory
Main articles: Computer memory and Computer data storage

Magnetic-core memory (using magnetic cores) was the computer memory of choice in the 1960s, until it was replaced by semiconductor memory (using MOS memory cells).
A computer's memory can be viewed as a list of cells into which numbers can be placed or read. Each cell has a numbered "address" and can store a single number. The computer can be instructed to "put the number 123 into the cell numbered 1357" or to "add the number that is in cell 1357 to the number that is in cell 2468 and put the answer into cell 1595." The information stored in memory may represent practically anything. Letters, numbers, even computer instructions can be placed into memory with equal ease. Since the CPU does not differentiate between different types of information, it is the software's responsibility to give significance to what the memory sees as nothing but a series of numbers.

In almost all modern computers, each memory cell is set up to store binary numbers in groups of eight bits (called a byte). Each byte is able to represent 256 different numbers (28 = 256); either from 0 to 255 or −128 to +127. To store larger numbers, several consecutive bytes may be used (typically, two, four or eight). When negative numbers are required, they are usually stored in two's complement notation. Other arrangements are possible, but are usually not seen outside of specialized applications or historical contexts. A computer can store any kind of information in memory if it can be represented numerically. Modern computers have billions or even trillions of bytes of memory.

The CPU contains a special set of memory cells called registers that can be read and written to much more rapidly than the main memory area. There are typically between two and one hundred registers depending on the type of CPU. Registers are used for the most frequently needed data items to avoid having to access main memory every time data is needed. As data is constantly being worked on, reducing the need to access main memory (which is often slow compared to the ALU and control units) greatly increases the computer's speed.

Computer main memory comes in two principal varieties:

random-access memory or RAM
read-only memory or ROM
RAM can be read and written to anytime the CPU commands it, but ROM is preloaded with data and software that never changes, therefore the CPU can only read from it. ROM is typically used to store the computer's initial start-up instructions. In general, the contents of RAM are erased when the power to the computer is turned off, but ROM retains its data indefinitely. In a PC, the ROM contains a specialized program called the BIOS that orchestrates loading the computer's operating system from the hard disk drive into RAM whenever the computer is turned on or reset. In embedded computers, which frequently do not have disk drives, all of the required software may be stored in ROM. Software stored in ROM is often called firmware, because it is notionally more like hardware than software. Flash memory blurs the distinction between ROM and RAM, as it retains its data when turned off but is also rewritable. It is typically much slower than conventional ROM and RAM however, so its use is restricted to applications where high speed is unnecessary.[f]

In more sophisticated computers there may be one or more RAM cache memories, which are slower than registers but faster than main memory. Generally computers with this sort of cache are designed to move frequently needed data into the cache automatically, often without the need for any intervention on the programmer's part.

Input/output (I/O)
Main article: Input/output

Hard disk drives are common storage devices used with computers.
I/O is the means by which a computer exchanges information with the outside world.[113] Devices that provide input or output to the computer are called peripherals.[114] On a typical personal computer, peripherals include input devices like the keyboard and mouse, and output devices such as the display and printer. Hard disk drives, floppy disk drives and optical disc drives serve as both input and output devices. Computer networking is another form of I/O. I/O devices are often complex computers in their own right, with their own CPU and memory. A graphics processing unit might contain fifty or more tiny computers that perform the calculations necessary to display 3D graphics.[citation needed] Modern desktop computers contain many smaller computers that assist the main CPU in performing I/O. A 2016-era flat screen display contains its own computer circuitry.

Multitasking
Main article: Computer multitasking
While a computer may be viewed as running one gigantic program stored in its main memory, in some systems it is necessary to give the appearance of running several programs simultaneously. This is achieved by multitasking i.e. having the computer switch rapidly between running each program in turn.[115] One means by which this is done is with a special signal called an interrupt, which can periodically cause the computer to stop executing instructions where it was and do something else instead. By remembering where it was executing prior to the interrupt, the computer can return to that task later. If several programs are running "at the same time". then the interrupt generator might be causing several hundred interrupts per second, causing a program switch each time. Since modern computers typically execute instructions several orders of magnitude faster than human perception, it may appear that many programs are running at the same time even though only one is ever executing in any given instant. This method of multitasking is sometimes termed "time-sharing" since each program is allocated a "slice" of time in turn.[116]

Before the era of inexpensive computers, the principal use for multitasking was to allow many people to share the same computer. Seemingly, multitasking would cause a computer that is switching between several programs to run more slowly, in direct proportion to the number of programs it is running, but most programs spend much of their time waiting for slow input/output devices to complete their tasks. If a program is waiting for the user to click on the mouse or press a key on the keyboard, then it will not take a "time slice" until the event it is waiting for has occurred. This frees up time for other programs to execute so that many programs may be run simultaneously without unacceptable speed loss.

Multiprocessing
Main article: Multiprocessing

Cray designed many supercomputers that used multiprocessing heavily.
Some computers are designed to distribute their work across several CPUs in a multiprocessing configuration, a technique once employed in only large and powerful machines such as supercomputers, mainframe computers and servers. Multiprocessor and multi-core (multiple CPUs on a single integrated circuit) personal and laptop computers are now widely available, and are being increasingly used in lower-end markets as a result.

Supercomputers in particular often have highly unique architectures that differ significantly from the basic stored-program architecture and from general-purpose computers.[g] They often feature thousands of CPUs, customized high-speed interconnects, and specialized computing hardware. Such designs tend to be useful for only specialized tasks due to the large scale of program organization required to use most of the available resources at once. Supercomputers usually see usage in large-scale simulation, graphics rendering, and cryptography applications, as well as with other so-called "embarrassingly parallel" tasks.

Software
Main article: Software
Software refers to parts of the computer which do not have a material form, such as programs, data, protocols, etc. Software is that part of a computer system that consists of encoded information or computer instructions, in contrast to the physical hardware from which the system is built. Computer software includes computer programs, libraries and related non-executable data, such as online documentation or digital media. It is often divided into system software and application software. Computer hardware and software require each other and neither can be realistically used on its own. When software is stored in hardware that cannot easily be modified, such as with BIOS ROM in an IBM PC compatible computer, it is sometimes called "firmware".

Operating system /System Software	Unix and BSD	UNIX System V, IBM AIX, HP-UX, Solaris (SunOS), IRIX, List of BSD operating systems
Linux	List of Linux distributions, Comparison of Linux distributions
Microsoft Windows	Windows 95, Windows 98, Windows NT, Windows 2000, Windows ME, Windows XP, Windows Vista, Windows 7, Windows 8, Windows 8.1, Windows 10, Windows 11
DOS	86-DOS (QDOS), IBM PC DOS, MS-DOS, DR-DOS, FreeDOS
Macintosh operating systems	Classic Mac OS, macOS (previously OS X and Mac OS X)
Embedded and real-time	List of embedded operating systems
Experimental	Amoeba, Oberon–AOS, Bluebottle, A2, Plan 9 from Bell Labs
Library	Multimedia	DirectX, OpenGL, OpenAL, Vulkan (API)
Programming library	C standard library, Standard Template Library
Data	Protocol	TCP/IP, Kermit, FTP, HTTP, SMTP
File format	HTML, XML, JPEG, MPEG, PNG
User interface	Graphical user interface (WIMP)	Microsoft Windows, GNOME, KDE, QNX Photon, CDE, GEM, Aqua
Text-based user interface	Command-line interface, Text user interface
Application Software	Office suite	Word processing, Desktop publishing, Presentation program, Database management system, Scheduling & Time management, Spreadsheet, Accounting software
Internet Access	Browser, Email client, Web server, Mail transfer agent, Instant messaging
Design and manufacturing	Computer-aided design, Computer-aided manufacturing, Plant management, Robotic manufacturing, Supply chain management
Graphics	Raster graphics editor, Vector graphics editor, 3D modeler, Animation editor, 3D computer graphics, Video editing, Image processing
Audio	Digital audio editor, Audio playback, Mixing, Audio synthesis, Computer music
Software engineering	Compiler, Assembler, Interpreter, Debugger, Text editor, Integrated development environment, Software performance analysis, Revision control, Software configuration management
Educational	Edutainment, Educational game, Serious game, Flight simulator
Games	Strategy, Arcade, Puzzle, Simulation, First-person shooter, Platform, Massively multiplayer, Interactive fiction
Misc	Artificial intelligence, Antivirus software, Malware scanner, Installer/Package management systems, File manager
Languages
There are thousands of different programming languages—some intended for general purpose, others useful for only highly specialized applications.

Programming languages
Lists of programming languages	Timeline of programming languages, List of programming languages by category, Generational list of programming languages, List of programming languages, Non-English-based programming languages
Commonly used assembly languages	ARM, MIPS, x86
Commonly used high-level programming languages	Ada, BASIC, C, C++, C#, COBOL, Fortran, PL/I, REXX, Java, Lisp, Pascal, Object Pascal
Commonly used scripting languages	Bourne script, JavaScript, Python, Ruby, PHP, Perl
Programs
The defining feature of modern computers which distinguishes them from all other machines is that they can be programmed. That is to say that some type of instructions (the program) can be given to the computer, and it will process them. Modern computers based on the von Neumann architecture often have machine code in the form of an imperative programming language. In practical terms, a computer program may be just a few instructions or extend to many millions of instructions, as do the programs for word processors and web browsers for example. A typical modern computer can execute billions of instructions per second (gigaflops) and rarely makes a mistake over many years of operation. Large computer programs consisting of several million instructions may take teams of programmers years to write, and due to the complexity of the task almost certainly contain errors.

Stored program architecture
Main articles: Computer program and Computer programming

Replica of the Manchester Baby, the world's first electronic stored-program computer, at the Museum of Science and Industry in Manchester, England
This section applies to most common RAM machine–based computers.

In most cases, computer instructions are simple: add one number to another, move some data from one location to another, send a message to some external device, etc. These instructions are read from the computer's memory and are generally carried out (executed) in the order they were given. However, there are usually specialized instructions to tell the computer to jump ahead or backwards to some other place in the program and to carry on executing from there. These are called "jump" instructions (or branches). Furthermore, jump instructions may be made to happen conditionally so that different sequences of instructions may be used depending on the result of some previous calculation or some external event. Many computers directly support subroutines by providing a type of jump that "remembers" the location it jumped from and another instruction to return to the instruction following that jump instruction.

Program execution might be likened to reading a book. While a person will normally read each word and line in sequence, they may at times jump back to an earlier place in the text or skip sections that are not of interest. Similarly, a computer may sometimes go back and repeat the instructions in some section of the program over and over again until some internal condition is met. This is called the flow of control within the program and it is what allows the computer to perform tasks repeatedly without human intervention.

Comparatively, a person using a pocket calculator can perform a basic arithmetic operation such as adding two numbers with just a few button presses. But to add together all of the numbers from 1 to 1,000 would take thousands of button presses and a lot of time, with a near certainty of making a mistake. On the other hand, a computer may be programmed to do this with just a few simple instructions. The following example is written in the MIPS assembly language:

  begin:
  addi $8, $0, 0           # initialize sum to 0
  addi $9, $0, 1           # set first number to add = 1
  loop:
  slti $10, $9, 1000       # check if the number is less than 1000
  beq $10, $0, finish      # if odd number is greater than n then exit
  add $8, $8, $9           # update sum
  addi $9, $9, 1           # get next number
  j loop                   # repeat the summing process
  finish:
  add $2, $8, $0           # put sum in output register
Once told to run this program, the computer will perform the repetitive addition task without further human intervention. It will almost never make a mistake and a modern PC can complete the task in a fraction of a second.

Machine code
In most computers, individual instructions are stored as machine code with each instruction being given a unique number (its operation code or opcode for short). The command to add two numbers together would have one opcode; the command to multiply them would have a different opcode, and so on. The simplest computers are able to perform any of a handful of different instructions; the more complex computers have several hundred to choose from, each with a unique numerical code. Since the computer's memory is able to store numbers, it can also store the instruction codes. This leads to the important fact that entire programs (which are just lists of these instructions) can be represented as lists of numbers and can themselves be manipulated inside the computer in the same way as numeric data. The fundamental concept of storing programs in the computer's memory alongside the data they operate on is the crux of the von Neumann, or stored program, architecture.[118][119] In some cases, a computer might store some or all of its program in memory that is kept separate from the data it operates on. This is called the Harvard architecture after the Harvard Mark I computer. Modern von Neumann computers display some traits of the Harvard architecture in their designs, such as in CPU caches.

While it is possible to write computer programs as long lists of numbers (machine language) and while this technique was used with many early computers,[h] it is extremely tedious and potentially error-prone to do so in practice, especially for complicated programs. Instead, each basic instruction can be given a short name that is indicative of its function and easy to remember – a mnemonic such as ADD, SUB, MULT or JUMP. These mnemonics are collectively known as a computer's assembly language. Converting programs written in assembly language into something the computer can actually understand (machine language) is usually done by a computer program called an assembler.


A 1970s punched card containing one line from a Fortran program. The card reads: "Z(1) = Y + W(1)" and is labeled "PROJ039" for identification purposes.
Programming language
Main article: Programming language
Programming languages provide various ways of specifying programs for computers to run. Unlike natural languages, programming languages are designed to permit no ambiguity and to be concise. They are purely written languages and are often difficult to read aloud. They are generally either translated into machine code by a compiler or an assembler before being run, or translated directly at run time by an interpreter. Sometimes programs are executed by a hybrid method of the two techniques.

Low-level languages
Main article: Low-level programming language
Machine languages and the assembly languages that represent them (collectively termed low-level programming languages) are generally unique to the particular architecture of a computer's central processing unit (CPU). For instance, an ARM architecture CPU (such as may be found in a smartphone or a hand-held videogame) cannot understand the machine language of an x86 CPU that might be in a PC.[i] Historically a significant number of other cpu architectures were created and saw extensive use, notably including the MOS Technology 6502 and 6510 in addition to the Zilog Z80.

High-level languages
Main article: High-level programming language
Although considerably easier than in machine language, writing long programs in assembly language is often difficult and is also error prone. Therefore, most practical programs are written in more abstract high-level programming languages that are able to express the needs of the programmer more conveniently (and thereby help reduce programmer error). High level languages are usually "compiled" into machine language (or sometimes into assembly language and then into machine language) using another computer program called a compiler.[j] High level languages are less related to the workings of the target computer than assembly language, and more related to the language and structure of the problem(s) to be solved by the final program. It is therefore often possible to use different compilers to translate the same high level language program into the machine language of many different types of computer. This is part of the means by which software like video games may be made available for different computer architectures such as personal computers and various video game consoles.

Program design
Program design of small programs is relatively simple and involves the analysis of the problem, collection of inputs, using the programming constructs within languages, devising or using established procedures and algorithms, providing data for output devices and solutions to the problem as applicable.[120] As problems become larger and more complex, features such as subprograms, modules, formal documentation, and new paradigms such as object-oriented programming are encountered.[121] Large programs involving thousands of line of code and more require formal software methodologies.[122] The task of developing large software systems presents a significant intellectual challenge.[123] Producing software with an acceptably high reliability within a predictable schedule and budget has historically been difficult;[124] the academic and professional discipline of software engineering concentrates specifically on this challenge.[125]

Bugs
Main article: Software bug

The actual first computer bug, a moth found trapped on a relay of the Harvard Mark II computer
Errors in computer programs are called "bugs". They may be benign and not affect the usefulness of the program, or have only subtle effects. However, in some cases they may cause the program or the entire system to "hang", becoming unresponsive to input such as mouse clicks or keystrokes, to completely fail, or to crash.[126] Otherwise benign bugs may sometimes be harnessed for malicious intent by an unscrupulous user writing an exploit, code designed to take advantage of a bug and disrupt a computer's proper execution. Bugs are usually not the fault of the computer. Since computers merely execute the instructions they are given, bugs are nearly always the result of programmer error or an oversight made in the program's design.[k] Admiral Grace Hopper, an American computer scientist and developer of the first compiler, is credited for having first used the term "bugs" in computing after a dead moth was found shorting a relay in the Harvard Mark II computer in September 1947.[127]

Networking and the Internet
Main articles: Computer networking and Internet

Visualization of a portion of the routes on the Internet
Computers have been used to coordinate information between multiple locations since the 1950s. The U.S. military's SAGE system was the first large-scale example of such a system, which led to a number of special-purpose commercial systems such as Sabre.[128] In the 1970s, computer engineers at research institutions throughout the United States began to link their computers together using telecommunications technology. The effort was funded by ARPA (now DARPA), and the computer network that resulted was called the ARPANET.[129] The technologies that made the Arpanet possible spread and evolved.

In time, the network spread beyond academic and military institutions and became known as the Internet. The emergence of networking involved a redefinition of the nature and boundaries of the computer. Computer operating systems and applications were modified to include the ability to define and access the resources of other computers on the network, such as peripheral devices, stored information, and the like, as extensions of the resources of an individual computer. Initially these facilities were available primarily to people working in high-tech environments, but in the 1990s the spread of applications like e-mail and the World Wide Web, combined with the development of cheap, fast networking technologies like Ethernet and ADSL saw computer networking become almost ubiquitous. In fact, the number of computers that are networked is growing phenomenally. A very large proportion of personal computers regularly connect to the Internet to communicate and receive information. "Wireless" networking, often utilizing mobile phone networks, has meant networking is becoming increasingly ubiquitous even in mobile computing environments.

Unconventional computers
Main article: Human computer
See also: Harvard Computers
A computer does not need to be electronic, nor even have a processor, nor RAM, nor even a hard disk. While popular usage of the word "computer" is synonymous with a personal electronic computer,[l] a typical modern definition of a computer is: "A device that computes, especially a programmable [usually] electronic machine that performs high-speed mathematical or logical operations or that assembles, stores, correlates, or otherwise processes information."[130] According to this definition, any device that processes information qualifies as a computer.

Future
There is active research to make non-classical computers out of many promising new types of technology, such as optical computers, DNA computers, neural computers, and quantum computers. Most computers are universal, and are able to calculate any computable function, and are limited only by their memory capacity and operating speed. However different designs of computers can give very different performance for particular problems; for example quantum computers can potentially break some modern encryption algorithms (by quantum factoring) very quickly.

Computer architecture paradigms
There are many types of computer architectures:

Quantum computer vs. Chemical computer
Scalar processor vs. Vector processor
Non-Uniform Memory Access (NUMA) computers
Register machine vs. Stack machine
Harvard architecture vs. von Neumann architecture
Cellular architecture
Of all these abstract machines, a quantum computer holds the most promise for revolutionizing computing.[131] Logic gates are a common abstraction which can apply to most of the above digital or analog paradigms. The ability to store and execute lists of instructions called programs makes computers extremely versatile, distinguishing them from calculators. The Church–Turing thesis is a mathematical statement of this versatility: any computer with a minimum capability (being Turing-complete) is, in principle, capable of performing the same tasks that any other computer can perform. Therefore, any type of computer (netbook, supercomputer, cellular automaton, etc.) is able to perform the same computational tasks, given enough time and storage capacity.

Artificial intelligence
A computer will solve problems in exactly the way it is programmed to, without regard to efficiency, alternative solutions, possible shortcuts, or possible errors in the code. Computer programs that learn and adapt are part of the emerging field of artificial intelligence and machine learning. Artificial intelligence based products generally fall into two major categories: rule-based systems and pattern recognition systems. Rule-based systems attempt to represent the rules used by human experts and tend to be expensive to develop. Pattern-based systems use data about a problem to generate conclusions. Examples of pattern-based systems include voice recognition, font recognition, translation and the emerging field of on-line marketing.

Professions and organizations
As the use of computers has spread throughout society, there are an increasing number of careers involving computers.

Computer-related professions
Hardware-related	Electrical engineering, Electronic engineering, Computer engineering, Telecommunications engineering, Optical engineering, Nanoengineering
Software-related	Computer science, Computer engineering, Desktop publishing, Human–computer interaction, Information technology, Information systems, Computational science, Software engineering, Video game industry, Web design
The need for computers to work well together and to be able to exchange information has spawned the need for many standards organizations, clubs and societies of both a formal and informal nature.

Organizations
Standards groups	ANSI, IEC, IEEE, IETF, ISO, W3C
Professional societies	ACM, AIS, IET, IFIP, BCS
Free/open source software groups	Free Software Foundation, Mozilla Foundation, Apache Software Foundation
See also
Computability theory
Computer security
Glossary of computer hardware terms
History of computer science
List of computer term etymologies
List of computer system manufacturers
List of fictional computers
List of films about computers
List of pioneers in computer science
Pulse computation
TOP500 (list of most powerful computers)
Unconventional computing
Notes
 According to Schmandt-Besserat 1981, these clay containers contained tokens, the total of which were the count of objects being transferred. The containers thus served as something of a bill of lading or an accounts book. In order to avoid breaking open the containers, first, clay impressions of the tokens were placed on the outside of the containers, for the count; the shapes of the impressions were abstracted into stylized marks; finally, the abstract marks were systematically used as numerals; these numerals were finally formalized as numbers.
Eventually the marks on the outside of the containers were all that were needed to convey the count, and the clay containers evolved into clay tablets with marks for the count. Schmandt-Besserat 1999 estimates it took 4000 years.
 The Intel 4004 (1971) die was 12 mm2, composed of 2300 transistors; by comparison, the Pentium Pro was 306 mm2, composed of 5.5 million transistors.[101]
 Most major 64-bit instruction set architectures are extensions of earlier designs. All of the architectures listed in this table, except for Alpha, existed in 32-bit forms before their 64-bit incarnations were introduced.
 The control unit's role in interpreting instructions has varied somewhat in the past. Although the control unit is solely responsible for instruction interpretation in most modern computers, this is not always the case. Some computers have instructions that are partially interpreted by the control unit with further interpretation performed by another device. For example, EDVAC, one of the earliest stored-program computers, used a central control unit that interpreted only four instructions. All of the arithmetic-related instructions were passed on to its arithmetic unit and further decoded there.
 Instructions often occupy more than one memory address, therefore the program counter usually increases by the number of memory locations required to store one instruction.
 Flash memory also may only be rewritten a limited number of times before wearing out, making it less useful for heavy random access usage.[112]
 However, it is also very common to construct supercomputers out of many pieces of cheap commodity hardware; usually individual computers connected by networks. These so-called computer clusters can often provide supercomputer performance at a much lower cost than customized designs. While custom architectures are still used for most of the most powerful supercomputers, there has been a proliferation of cluster computers in recent years.[117]
 Even some later computers were commonly programmed directly in machine code. Some minicomputers like the DEC PDP-8 could be programmed directly from a panel of switches. However, this method was usually used only as part of the booting process. Most modern computers boot entirely automatically by reading a boot program from some non-volatile memory.
 However, there is sometimes some form of machine language compatibility between different computers. An x86-64 compatible microprocessor like the AMD Athlon 64 is able to run most of the same programs that an Intel Core 2 microprocessor can, as well as programs designed for earlier microprocessors like the Intel Pentiums and Intel 80486. This contrasts with very early commercial computers, which were often one-of-a-kind and totally incompatible with other computers.
 High level languages are also often interpreted rather than compiled. Interpreted languages are translated into machine code on the fly, while running, by another program called an interpreter.
 It is not universally true that bugs are solely due to programmer oversight. Computer hardware may fail or may itself have a fundamental problem that produces unexpected results in certain situations. For instance, the Pentium FDIV bug caused some Intel microprocessors in the early 1990s to produce inaccurate results for certain floating point division operations. This was caused by a flaw in the microprocessor design and resulted in a partial recall of the affected devices.
 According to the Shorter Oxford English Dictionary (6th ed, 2007), the word computer dates back to the mid 17th century, when it referred to "A person who makes calculations; specifically a person employed for this in an observatory etc."
References
 Evans 2018, p. 23.
 Smith 2013, p. 6.
 "computer (n.)". Online Etymology Dictionary. Archived from the original on 16 November 2016. Retrieved 19 August 2021.
 Robson, Eleanor (2008). Mathematics in Ancient Iraq. Princeton University Press. p. 5. ISBN 978-0-691-09182-2.: calculi were in use in Iraq for primitive accounting systems as early as 3200–3000 BCE, with commodity-specific counting representation systems. Balanced accounting was in use by 3000–2350 BCE, and a sexagesimal number system was in use 2350–2000 BCE.
 Flegg, Graham. (1989). Numbers through the ages. Houndmills, Basingstoke, Hampshire: Macmillan Education. ISBN 0-333-49130-0. OCLC 24660570.
 The Antikythera Mechanism Research Project Archived 28 April 2008 at the Wayback Machine, The Antikythera Mechanism Research Project. Retrieved 1 July 2007.
 Marchant, Jo (1 November 2006). "In search of lost time". Nature. 444 (7119): 534–538. Bibcode:2006Natur.444..534M. doi:10.1038/444534a. PMID 17136067. S2CID 4305761.
 G. Wiet, V. Elisseeff, P. Wolff, J. Naudu (1975). History of Mankind, Vol 3: The Great medieval Civilisations, p. 649. George Allen & Unwin Ltd, UNESCO.
 Fuat Sezgin "Catalogue of the Exhibition of the Institute for the History of Arabic-Islamic Science (at the Johann Wolfgang Goethe University", Frankfurt, Germany) Frankfurt Book Fair 2004, pp. 35 & 38.
 Charette, François (2006). "Archaeology: High tech from Ancient Greece". Nature. 444 (7119): 551–552. Bibcode:2006Natur.444..551C. doi:10.1038/444551a. PMID 17136077. S2CID 33513516.
 Bedini, Silvio A.; Maddison, Francis R. (1966). "Mechanical Universe: The Astrarium of Giovanni de' Dondi". Transactions of the American Philosophical Society. 56 (5): 1–69. doi:10.2307/1006002. JSTOR 1006002.
 Price, Derek de S. (1984). "A History of Calculating Machines". IEEE Micro. 4 (1): 22–52. doi:10.1109/MM.1984.291305.
 Őren, Tuncer (2001). "Advances in Computer and Information Sciences: From Abacus to Holonic Agents" (PDF). Turk J Elec Engin. 9 (1): 63–70. Archived (PDF) from the original on 15 September 2009. Retrieved 21 April 2016.
 Donald Routledge Hill (1985). "Al-Biruni's mechanical calendar", Annals of Science 42, pp. 139–163.
 "The Writer Automaton, Switzerland". chonday.com. 11 July 2013. Archived from the original on 20 February 2015. Retrieved 28 January 2015.
 Ray Girvan, "The revealed grace of the mechanism: computing after Babbage" Archived 3 November 2012 at the Wayback Machine, Scientific Computing World, May/June 2003
 Torres, Leonardo (10 October 1895). "Memória sobre las Máquinas Algébricas" (PDF). Revista de Obras Públicas (in Spanish) (28): 217–222.
 Leonardo Torres. Memoria sobre las máquinas algébricas: con un informe de la Real academia de ciencias exactas, fisicas y naturales, Misericordia, 1895.
 Thomas, Federico (1 August 2008). "A short account on Leonardo Torres' endless spindle". Mechanism and Machine Theory. IFToMM. 43 (8): 1055–1063. doi:10.1016/j.mechmachtheory.2007.07.003. hdl:10261/30460. ISSN 0094-114X.
 Gomez-Jauregui, Valentin; Gutierrez-Garcia, Andres; González-Redondo, Francisco A.; Iglesias, Miguel; Manchado, Cristina; Otero, Cesar (1 June 2022). "Torres Quevedo's mechanical calculator for second-degree equations with complex coefficients". Mechanism and Machine Theory. IFToMM. 172 (8): 104830. doi:10.1016/j.mechmachtheory.2022.104830. hdl:10902/24391. S2CID 247503677.
 Torres Quevedo, Leonardo (1901). "Machines á calculer". Mémoires Présentés par Divers Savants à l'Académie des Scienes de l'Institut de France (in French). Impr. nationale (París). XXXII.
 Halacy, Daniel Stephen (1970). Charles Babbage, Father of the Computer. Crowell-Collier Press. ISBN 978-0-02-741370-0.
 O'Connor, John J.; Robertson, Edmund F. (1998). "Charles Babbage". MacTutor History of Mathematics archive. School of Mathematics and Statistics, University of St Andrews, Scotland. Archived from the original on 16 June 2006. Retrieved 14 June 2006.
 "Babbage". Online stuff. Science Museum. 19 January 2007. Archived from the original on 7 August 2012. Retrieved 1 August 2012.
 Graham-Cumming, John (23 December 2010). "Let's build Babbage's ultimate mechanical computer". opinion. New Scientist. Archived from the original on 5 August 2012. Retrieved 1 August 2012.
 L. Torres Quevedo. Ensayos sobre Automática – Su definicion. Extension teórica de sus aplicaciones, Revista de la Academia de Ciencias Exacta, Revista 12, pp. 391–418, 1914.
 Torres Quevedo, Leonardo. Automática: Complemento de la Teoría de las Máquinas, (pdf), pp. 575-583, Revista de Obras Públicas, 19 November 1914.
 Ronald T. Kneusel. Numbers and Computers, Springer, pp. 84-85, 2017. ISBN 978-3-319-50508-4
 Randell 1982, p. 6, 11–13.
 B. Randell. Electromechanical Calculating Machine, The Origins of Digital Computers, pp.109-120, 1982.
 Bromley 1990.
 Randell, Brian. Digital Computers, History of Origins, (pdf), p. 545, Digital Computers: Origins, Encyclopedia of Computer Science, January 2003.
 The Modern History of Computing. Stanford Encyclopedia of Philosophy. 2017. Archived from the original on 12 July 2010. Retrieved 7 January 2014.
 Zuse, Horst. "Part 4: Konrad Zuse's Z1 and Z3 Computers". The Life and Work of Konrad Zuse. EPE Online. Archived from the original on 1 June 2008. Retrieved 17 June 2008.
 Bellis, Mary (15 May 2019) [First published 2006 at inventors.about.com/library/weekly/aa050298.htm]. "Biography of Konrad Zuse, Inventor and Programmer of Early Computers". thoughtco.com. Dotdash Meredith. Archived from the original on 13 December 2020. Retrieved 3 February 2021. Konrad Zuse earned the semiofficial title of 'inventor of the modern computer'[who?]
 "Who is the Father of the Computer?". computerhope.com.
 Zuse, Konrad (2010) [1984]. The Computer – My Life Translated by McKenna, Patricia and Ross, J. Andrew from: Der Computer, mein Lebenswerk (1984). Berlin/Heidelberg: Springer-Verlag. ISBN 978-3-642-08151-4.
 Salz Trautman, Peggy (20 April 1994). "A Computer Pioneer Rediscovered, 50 Years On". The New York Times. Archived from the original on 4 November 2016. Retrieved 15 February 2017.
 Zuse, Konrad (1993). Der Computer. Mein Lebenswerk (in German) (3rd ed.). Berlin: Springer-Verlag. p. 55. ISBN 978-3-540-56292-4.
 "Crash! The Story of IT: Zuse". Archived from the original on 18 September 2016. Retrieved 1 June 2016.
 Rojas, R. (1998). "How to make Zuse's Z3 a universal computer". IEEE Annals of the History of Computing. 20 (3): 51–54. doi:10.1109/85.707574. S2CID 14606587.
 Rojas, Raúl. "How to Make Zuse's Z3 a Universal Computer" (PDF). fu-berlin.de. Archived (PDF) from the original on 9 August 2017. Retrieved 28 September 2015.
 O'Regan, Gerard (2010). A Brief History of Computing. Springer Nature. p. 65. ISBN 978-3-030-66599-9.
 "notice". Des Moines Register. 15 January 1941.
 Arthur W. Burks (1989). The First Electronic Computer. University of Michigan Press. ISBN 0-472-08104-7. Retrieved 1 June 2019.
 Copeland, Jack (2006). Colossus: The Secrets of Bletchley Park's Codebreaking Computers. Oxford: Oxford University Press. pp. 101–115. ISBN 978-0-19-284055-4.
 Miller, Joe (10 November 2014). "The woman who cracked Enigma cyphers". BBC News. Archived from the original on 10 November 2014. Retrieved 14 October 2018.
 Bearne, Suzanne (24 July 2018). "Meet the female codebreakers of Bletchley Park". The Guardian. Archived from the original on 7 February 2019. Retrieved 14 October 2018.
 "Bletchley's code-cracking Colossus". BBC. Archived from the original on 4 February 2010. Retrieved 24 November 2021.
 "Colossus – The Rebuild Story". The National Museum of Computing. Archived from the original on 18 April 2015. Retrieved 7 January 2014.
 Randell, Brian; Fensom, Harry; Milne, Frank A. (15 March 1995). "Obituary: Allen Coombs". The Independent. Archived from the original on 3 February 2012. Retrieved 18 October 2012.
 Fensom, Jim (8 November 2010). "Harry Fensom obituary". The Guardian. Archived from the original on 17 September 2013. Retrieved 17 October 2012.
 John Presper Eckert Jr. and John W. Mauchly, Electronic Numerical Integrator and Computer, United States Patent Office, US Patent 3,120,606, filed 26 June 1947, issued 4 February 1964, and invalidated 19 October 1973 after court ruling on Honeywell v. Sperry Rand.
 Evans 2018, p. 39.
 Light 1999, p. 459.
 "Generations of Computer". techiwarehouse.com. Archived from the original on 2 July 2015. Retrieved 7 January 2014.
 Turing, A. M. (1937). "On Computable Numbers, with an Application to the Entscheidungsproblem". Proceedings of the London Mathematical Society. 2. 42 (1): 230–265. doi:10.1112/plms/s2-42.1.230. S2CID 73712.
 Copeland, Jack (2004). The Essential Turing. p. 22: von Neumann ... firmly emphasized to me, and to others I am sure, that the fundamental conception is owing to Turing—insofar as not anticipated by Babbage, Lovelace and others. Letter by Stanley Frankel to Brian Randell, 1972.
 Enticknap, Nicholas (Summer 1998). "Computing's Golden Jubilee". Resurrection (20). ISSN 0958-7403. Archived from the original on 9 January 2012. Retrieved 19 April 2008.
 "Early computers at Manchester University". Resurrection. 1 (4). Summer 1992. ISSN 0958-7403. Archived from the original on 28 August 2017. Retrieved 7 July 2010.
 "Early Electronic Computers (1946–51)". University of Manchester. Archived from the original on 5 January 2009. Retrieved 16 November 2008.
 Napper, R. B. E. "Introduction to the Mark 1". The University of Manchester. Archived from the original on 26 October 2008. Retrieved 4 November 2008.
 "Our Computer Heritage Pilot Study: Deliveries of Ferranti Mark I and Mark I Star computers". Computer Conservation Society. Archived from the original on 11 December 2016. Retrieved 9 January 2010.
 Lavington, Simon. "A brief history of British computers: the first 25 years (1948–1973)". British Computer Society. Archived from the original on 5 July 2010. Retrieved 10 January 2010.
 Lee, Thomas H. (2003). The Design of CMOS Radio-Frequency Integrated Circuits (PDF). Cambridge University Press. ISBN 978-1-139-64377-1. Archived from the original (PDF) on 9 December 2019. Retrieved 31 July 2019.
 Puers, Robert; Baldi, Livio; Voorde, Marcel Van de; Nooten, Sebastiaan E. van (2017). Nanoelectronics: Materials, Devices, Applications, 2 Volumes. John Wiley & Sons. p. 14. ISBN 978-3-527-34053-8. Retrieved 31 July 2019.
 Moskowitz, Sanford L. (2016). Advanced Materials Innovation: Managing Global Technology in the 21st century. John Wiley & Sons. pp. 165–167. ISBN 978-0-470-50892-3. Retrieved 28 August 2019.
 Lavington 1998, pp. 34–35.
 Cooke-Yarborough, E. H. (June 1998). "Some early transistor applications in the UK". Engineering Science & Education Journal. 7 (3): 100–106. doi:10.1049/esej:19980301. ISSN 0963-7346. Archived from the original on 8 November 2020. Retrieved 7 June 2009. (subscription required)
 Cooke-Yarborough, E.H. (1957). Introduction to Transistor Circuits. Edinburgh: Oliver and Boyd. p. 139.
 "1960: Metal Oxide Semiconductor (MOS) Transistor Demonstrated". The Silicon Engine: A Timeline of Semiconductors in Computers. Computer History Museum. Archived from the original on 27 October 2019. Retrieved 31 August 2019.
 Motoyoshi, M. (2009). "Through-Silicon Via (TSV)". Proceedings of the IEEE. 97 (1): 43–48. doi:10.1109/JPROC.2008.2007462. ISSN 0018-9219. S2CID 29105721.
 Young, Ian (12 December 2018). "Transistors Keep Moore's Law Alive". EETimes. Archived from the original on 24 September 2019. Retrieved 18 July 2019.
 Laws, David (4 December 2013). "Who Invented the Transistor?". Computer History Museum. Archived from the original on 13 December 2013. Retrieved 20 July 2019.
 Hittinger, William C. (1973). "Metal-Oxide-Semiconductor Technology". Scientific American. 229 (2): 48–59. Bibcode:1973SciAm.229b..48H. doi:10.1038/scientificamerican0873-48. ISSN 0036-8733. JSTOR 24923169.
 Malmstadt, Howard V.; Enke, Christie G.; Crouch, Stanley R. (1994). Making the Right Connections: Microcomputers and Electronic Instrumentation. American Chemical Society. p. 389. ISBN 978-0-8412-2861-0. Retrieved 28 August 2019. The relative simplicity and low power requirements of MOSFETs have fostered today's microcomputer revolution.
 Fossum, Jerry G.; Trivedi, Vishal P. (2013). Fundamentals of Ultra-Thin-Body MOSFETs and FinFETs. Cambridge University Press. p. vii. ISBN 978-1-107-43449-3. Retrieved 28 August 2019.
 Marriott, J.W. (10 June 2019). "Remarks by Director Iancu at the 2019 International Intellectual Property Conference". United States Patent and Trademark Office. Archived from the original on 17 December 2019. Retrieved 20 July 2019.
 "Dawon Kahng". National Inventors Hall of Fame. Archived from the original on 27 October 2019. Retrieved 27 June 2019.
 "Martin Atalla in Inventors Hall of Fame, 2009". Archived from the original on 19 September 2019. Retrieved 21 June 2013.
 Triumph of the MOS Transistor. Computer History Museum. 6 August 2010. Archived from the original on 18 August 2021. Retrieved 21 July 2019 – via YouTube.
 "The Hapless Tale of Geoffrey Dummer" Archived 11 May 2013 at the Wayback Machine, (n.d.), (HTML), Electronic Product News, accessed 8 July 2008.
 Kilby, Jack (2000). "Nobel lecture" (PDF). Stockholm: Nobel Foundation. Archived (PDF) from the original on 29 May 2008. Retrieved 15 May 2008.
 The Chip that Jack Built Archived 1 May 2015 at the Wayback Machine, (c. 2008), (HTML), Texas Instruments, Retrieved 29 May 2008.
 Jack S. Kilby, Miniaturized Electronic Circuits, United States Patent Office, US Patent 3,138,743, filed 6 February 1959, issued 23 June 1964.
 Winston, Brian (1998). Media Technology and Society: A History: From the Telegraph to the Internet. Routledge. p. 221. ISBN 978-0-415-14230-4. Retrieved 6 June 2020.
 Saxena, Arjun N. (2009). Invention of Integrated Circuits: Untold Important Facts. World Scientific. p. 140. ISBN 978-981-281-445-6. Retrieved 28 August 2019.
 "Integrated circuits". NASA. Archived from the original on 21 July 2019. Retrieved 13 August 2019.
 Robert Noyce's Unitary circuit, US patent 2981877, "Semiconductor device-and-lead structure", issued 1961-04-25, assigned to Fairchild Semiconductor Corporation.
 "1959: Practical Monolithic Integrated Circuit Concept Patented". Computer History Museum. Archived from the original on 24 October 2019. Retrieved 13 August 2019.
 Lojek, Bo (2007). History of Semiconductor Engineering. Springer Science & Business Media. p. 120. ISBN 978-3-540-34258-8.
 Bassett, Ross Knox (2007). To the Digital Age: Research Labs, Start-up Companies, and the Rise of MOS Technology. Johns Hopkins University Press. p. 46. ISBN 978-0-8018-8639-3. Retrieved 31 July 2019.
 Huff, Howard R.; Tsuya, H.; Gösele, U. (1998). Silicon Materials Science and Technology: Proceedings of the Eighth International Symposium on Silicon Materials Science and Technology. Electrochemical Society. pp. 181–182. ISBN 978-1-56677-193-1. Retrieved 28 August 2019.
 Kuo, Yue (1 January 2013). "Thin Film Transistor Technology—Past, Present, and Future" (PDF). The Electrochemical Society Interface. 22 (1): 55–61. Bibcode:2013ECSIn..22a..55K. doi:10.1149/2.F06131if. ISSN 1064-8208. Archived (PDF) from the original on 29 August 2017. Retrieved 31 July 2019.
 "Tortoise of Transistors Wins the Race – CHM Revolution". Computer History Museum. Archived from the original on 10 March 2020. Retrieved 22 July 2019.
 "1964 – First Commercial MOS IC Introduced". Computer History Museum. Archived from the original on 22 December 2015. Retrieved 31 July 2019.
 "1968: Silicon Gate Technology Developed for ICs". Computer History Museum. Archived from the original on 29 July 2020. Retrieved 22 July 2019.
 "1971: Microprocessor Integrates CPU Function onto a Single Chip". Computer History Museum. Archived from the original on 12 August 2021. Retrieved 22 July 2019.
 Colinge, Jean-Pierre; Greer, James C. (2016). Nanowire Transistors: Physics of Devices and Materials in One Dimension. Cambridge University Press. p. 2. ISBN 978-1-107-05240-6. Retrieved 31 July 2019.
 "Intel's First Microprocessor—the Intel 4004". Intel Corp. November 1971. Archived from the original on 13 May 2008. Retrieved 17 May 2008.
 Patterson, David; Hennessy, John (1998). Computer Organization and Design. San Francisco: Morgan Kaufmann. pp. 27–39. ISBN 978-1-55860-428-5.
 Federico Faggin, The Making of the First Microprocessor Archived 27 October 2019 at the Wayback Machine, IEEE Solid-State Circuits Magazine, Winter 2009, IEEE Xplore
 "7 dazzling smartphone improvements with Qualcomm's Snapdragon 835 chip". 3 January 2017. Archived from the original on 30 September 2019. Retrieved 5 April 2019.
 Chartier, David (23 December 2008). "Global notebook shipments finally overtake desktops". Ars Technica. Archived from the original on 4 July 2017. Retrieved 14 June 2017.
 IDC (25 July 2013). "Growth Accelerates in the Worldwide Mobile Phone and Smartphone Markets in the Second Quarter, According to IDC". Archived from the original on 26 June 2014.
 "Google Books Ngram Viewer". books.google.com.
 "Google Books Ngram Viewer". books.google.com.
 "Google Books Ngram Viewer". books.google.com.
 "Google Books Ngram Viewer". books.google.com.
 David J. Eck (2000). The Most Complex Machine: A Survey of Computers and Computing. A K Peters, Ltd. p. 54. ISBN 978-1-56881-128-4.
 Erricos John Kontoghiorghes (2006). Handbook of Parallel Computing and Statistics. CRC Press. p. 45. ISBN 978-0-8247-4067-2.
 Verma & Mielke 1988.
 Donald Eadie (1968). Introduction to the Basic Computer. Prentice-Hall. p. 12.
 Arpad Barna; Dan I. Porat (1976). Introduction to Microcomputers and the Microprocessors. Wiley. p. 85. ISBN 978-0-471-05051-3.
 Jerry Peek; Grace Todino; John Strang (2002). Learning the UNIX Operating System: A Concise Guide for the New User. O'Reilly. p. 130. ISBN 978-0-596-00261-9.
 Gillian M. Davis (2002). Noise Reduction in Speech Applications. CRC Press. p. 111. ISBN 978-0-8493-0949-6.
 TOP500 2006, p. [page needed].
 Cragon, Harvey (2000). Computer Architecture and Implementation. Cambridge University Press. p. 5. ISBN 978-0-521-65168-4. Archived from the original on 30 July 2022. Retrieved 10 June 2022.
 Xu, Zhiwei; Zhang, Jialin (2021). Computational Thinking: A Perspective on Computer Science. Singapore: Springer. p. 60. ISBN 978-981-16-3848-0. Archived from the original on 30 July 2022. Retrieved 10 June 2022. It is called the stored program architecture or stored program model, also known as the von Neumann architecture. We will use these terms interchangeably.
 Ronald J. Leach (27 January 2016). Introduction to Software Engineering. CRC Press. p. 11. ISBN 978-1-4987-0528-8. Retrieved 26 November 2022.
 Hong Zhu (22 March 2005). Software Design Methodology: From Principles to Architectural Styles. Elsevier. pp. 47–72. ISBN 978-0-08-045496-2. Retrieved 26 November 2022.
 Ronald J. Leach (27 January 2016). Introduction to Software Engineering. CRC Press. p. 56. ISBN 978-1-4987-0528-8. Retrieved 26 November 2022.
 John Knight (12 January 2012). Fundamentals of Dependable Computing for Software Engineers. CRC Press. p. 186. ISBN 978-1-4665-1821-6. Retrieved 26 November 2022.
 Frederick P. Brooks (Jr.) (1975). The Mythical Man-month: Essays on Software Engineering. Addison-Wesley Publishing Company. ISBN 978-0-201-00650-6. Retrieved 26 November 2022.
 Ian Sommerville (2007). Software Engineering. Pearson Education. pp. 4–17. ISBN 978-0-321-31379-9. Retrieved 26 November 2022.
 "Why do computers crash?". Scientific American. Archived from the original on 1 May 2018. Retrieved 3 March 2022.
 Taylor, Alexander L. III (16 April 1984). "The Wizard Inside the Machine". Time. Archived from the original on 16 March 2007. Retrieved 17 February 2007.
 Agatha C. Hughes (2000). Systems, Experts, and Computers. MIT Press. p. 161. ISBN 978-0-262-08285-3. The experience of SAGE helped make possible the first truly large-scale commercial real-time network: the SABRE computerized airline reservations system
 Leiner, Barry M.; Cerf, Vinton G.; Clark, David D.; Kahn, Robert E.; Kleinrock, Leonard; Lynch, Daniel C.; Postel, Jon; Roberts, Larry G.; Wolf, Stephen (1999). "A Brief History of the Internet". arXiv:cs/9901011.
 "Definition of computer". Thefreedictionary.com. Archived from the original on 26 December 2009. Retrieved 29 January 2012.
 II, Joseph D. Dumas (2005). Computer Architecture: Fundamentals and Principles of Computer Design. CRC Press. p. 340. ISBN 978-0-8493-2749-0. Retrieved 9 November 2020.
Sources
Evans, Claire L. (2018). Broad Band: The Untold Story of the Women Who Made the Internet. New York: Portfolio/Penguin. ISBN 978-0-7352-1175-9. Retrieved 9 November 2020.
Fuegi, J.; Francis, J. (2003). "Lovelace & Babbage and the creation of the 1843 'notes'". IEEE Annals of the History of Computing. 25 (4): 16. doi:10.1109/MAHC.2003.1253887. S2CID 40077111.
Kempf, Karl (1961). Historical Monograph: Electronic Computers Within the Ordnance Corps. Aberdeen Proving Ground (United States Army). Archived from the original on 16 October 2006. Retrieved 24 October 2006.
Phillips, Tony (2000). "The Antikythera Mechanism I". American Mathematical Society. Archived from the original on 27 April 2006. Retrieved 5 April 2006.
Shannon, Claude Elwood (1940). A symbolic analysis of relay and switching circuits (Thesis). Massachusetts Institute of Technology. hdl:1721.1/11173.
Digital Equipment Corporation (1972). PDP-11/40 Processor Handbook (PDF). Maynard, MA: Digital Equipment Corporation. Archived (PDF) from the original on 1 December 2017. Retrieved 27 November 2017.
Swade, Doron D. (February 1993). "Redeeming Charles Babbage's Mechanical Computer". Scientific American. 268 (2): 86–91. Bibcode:1993SciAm.268b..86S. doi:10.1038/scientificamerican0293-86. JSTOR 24941379.
Meuer, Hans; Strohmaier, Erich; Simon, Horst; Dongarra, Jack (13 November 2006). "Architectures Share Over Time". TOP500. Archived from the original on 20 February 2007. Retrieved 27 November 2006.
Lavington, Simon (1998). A History of Manchester Computers (2nd ed.). Swindon: The British Computer Society. ISBN 978-0-902505-01-8.
Light, Jennifer S. (1999). "When Computers Were Women". Technology and Culture. 40 (3): 455–483. doi:10.1353/tech.1999.0128. JSTOR 25147356. S2CID 108407884.
Schmandt-Besserat, Denise (1999). "Tokens: The Cognitive Significance". Documenta Praehistorica. XXVI. Archived from the original on 30 January 2012.
Schmandt-Besserat, Denise (1981). "Decipherment of the earliest tablets". Science. 211 (4479): 283–285. Bibcode:1981Sci...211..283S. doi:10.1126/science.211.4479.283. PMID 17748027.
Stokes, Jon (2007). Inside the Machine: An Illustrated Introduction to Microprocessors and Computer Architecture. San Francisco: No Starch Press. ISBN 978-1-59327-104-6.
Zuse, Konrad (1993). The Computer – My life. Berlin: Pringler-Verlag. ISBN 978-0-387-56453-1.
Felt, Dorr E. (1916). Mechanical arithmetic, or The history of the counting machine. Chicago: Washington Institute.
Ifrah, Georges (2001). The Universal History of Computing: From the Abacus to the Quantum Computer. New York: John Wiley & Sons. ISBN 978-0-471-39671-0.
Berkeley, Edmund (1949). Giant Brains, or Machines That Think. John Wiley & Sons.
Cohen, Bernard (2000). "Howard Aiken, Portrait of a computer pioneer". Physics Today. Cambridge, Massachusetts: The MIT Press. 53 (3): 74–75. Bibcode:2000PhT....53c..74C. doi:10.1063/1.883007. ISBN 978-0-262-53179-5.
Ligonnière, Robert (1987). Préhistoire et Histoire des ordinateurs. Paris: Robert Laffont. ISBN 978-2-221-05261-7.
Couffignal, Louis (1933). Les machines à calculer; leurs principes, leur évolution. Paris: Gauthier-Villars.
Essinger, James (2004). Jacquard's Web, How a hand loom led to the birth of the information age. Oxford University Press. ISBN 978-0-19-280577-5.
Hyman, Anthony (1985). Charles Babbage: Pioneer of the Computer. Princeton University Press. ISBN 978-0-691-02377-9.
Bowden, B. V. (1953). Faster than thought. New York, Toronto, London: Pitman publishing corporation.
Moseley, Maboth (1964). Irascible Genius, Charles Babbage, inventor. London: Hutchinson.
Collier, Bruce (1970). The little engine that could've: The calculating machines of Charles Babbage. Garland Publishing. ISBN 978-0-8240-0043-1. Archived from the original on 20 January 2007. Retrieved 24 October 2013.
Randell, Brian (1982). "From Analytical Engine to Electronic Digital Computer: The Contributions of Ludgate, Torres, and Bush" (PDF). Archived from the original (PDF) on 21 September 2013. Retrieved 29 October 2013.
Bromley, Allan G. (1990). "Difference and Analytical Engines". In Aspray, William (ed.). Computing Before Computers (PDF). Ames: Iowa State University Press. pp. 59–98. ISBN 978-0-8138-0047-9. Archived (PDF) from the original on 9 October 2022.
Smith, Erika E. (2013). "Recognizing a Collective Inheritance through the History of Women in Computing". CLCWeb: Comparative Literature and Culture. 15 (1): 1–9. doi:10.7771/1481-4374.1972.
Verma, G.; Mielke, N. (1988). Reliability performance of ETOX based flash memories. IEEE International Reliability Physics Symposium.


Contents hide
(Top)
Origins
Terminology
Toggle Terminology subsection
Components
Toggle Components subsection
Classifications
Toggle Classifications subsection
Development
Toggle Development subsection
Industry
Toggle Industry subsection
Effects on society
Toggle Effects on society subsection
Collecting and preservation
See also
Notes
References
Sources
Further reading
External links
Video game

Article
Talk
Read
View source
View history

Tools
Page semi-protected
From Wikipedia, the free encyclopedia
"Video Games" redirects here. For other uses, see Video Games (disambiguation).
"Computer game" redirects here. For PC games, see PC game. For other uses, see Computer game (disambiguation).
Two children playing Pong on a television set.
First-generation Pong console at the Computerspielemuseum Berlin

Video games
Platforms
Arcade video gameConsole game Game consoleHome consoleHandheld consoleElectronic game Audio gameElectronic handheldOnline game Browser gameSocial-network gameMobile gamePC game LinuxMacVirtual reality game
Genres
Action Beat 'em up Hack and slashFightingPlatformShooterSurvivalBattle royaleAction-adventure StealthAdventure Interactive fictionInteractive movieVisual novelGachaHorror Survival horrorLicensedMasocoreMassively multiplayer onlineRole-playing Action role-playingTactical role-playingSci-fiSimulation Construction and managementLife simulationSportsVehicleStrategy 4XAuto battlerMultiplayer online battle arenaReal-time strategyReal-time tacticsTower defenseTurn-based strategyTurn-based tactics
Lists
Arcade games highest-grossingBest-selling games franchisesLongest-running franchisesMost-played mobile gamesGames considered the best Game of the YearsoundtracksNegative receptionCancelled games
Development
Game AIGame design Video game designInteractionProgrammingArtGraphicsMusic
vte
A video game[a] or computer game is an electronic game that involves interaction with a user interface or input device (such as a joystick, controller, keyboard, or motion sensing device) to generate visual feedback from a display device, most commonly shown in a video format on a television set, computer monitor, flat-panel display or touchscreen on handheld devices, or a virtual reality headset. Most modern video games are audiovisual, with audio complement delivered through speakers or headphones, and sometimes also with other types of sensory feedback (e.g., haptic technology that provides tactile sensations), and some video games also allow microphone and webcam inputs for in-game chatting and livestreaming.

Video games are typically categorized according to their hardware platform, which traditionally includes arcade video games, console games, and computer (PC) games; the latter also encompasses LAN games, online games, and browser games. More recently, the video game industry has expanded onto mobile gaming through mobile devices (such as smartphones and tablet computers), virtual and augmented reality systems, and remote cloud gaming. Video games are also classified into a wide range of genres based on their style of gameplay and target audience.

The first video game prototypes in the 1950s and 1960s were simple extensions of electronic games using video-like output from large, room-sized mainframe computers. The first consumer video game was the arcade video game Computer Space in 1971. In 1972 came the iconic hit game Pong and the first home console, the Magnavox Odyssey. The industry grew quickly during the "golden age" of arcade video games from the late 1970s to early 1980s but suffered from the crash of the North American video game market in 1983 due to loss of publishing control and saturation of the market. Following the crash, the industry matured, was dominated by Japanese companies such as Nintendo, Sega, and Sony, and established practices and methods around the development and distribution of video games to prevent a similar crash in the future, many of which continue to be followed. In the 2000s, the core industry centered on "AAA" games, leaving little room for riskier experimental games. Coupled with the availability of the Internet and digital distribution, this gave room for independent video game development (or "indie games") to gain prominence into the 2010s. Since then, the commercial importance of the video game industry has been increasing. The emerging Asian markets and proliferation of smartphone games in particular are altering player demographics towards casual gaming and increasing monetization by incorporating games as a service.

Today, video game development requires numerous interdisciplinary skills, vision, teamwork, and liaisons between different parties, including developers, publishers, distributors, retailers, hardware manufacturers, and other marketers, to successfully bring a game to its consumers. As of 2020, the global video game market had estimated annual revenues of US$159 billion across hardware, software, and services, which is three times the size of the global music industry and four times that of the film industry in 2019,[1] making it a formidable heavyweight across the modern entertainment industry. The video game market is also a major influence behind the electronics industry, where personal computer component, console, and peripheral sales, as well as consumer demands for better game performance, have been powerful driving factors for hardware design and innovation.

Origins
Main articles: History of video games and Early history of video games
Further information: History of arcade video games

Tennis for Two (1958), an early analog computer game that used an oscilloscope for a display
Early video games use interactive electronic devices with various display formats. The earliest example is from 1947—a "cathode-ray tube amusement device" was filed for a patent on 25 January 1947, by Thomas T. Goldsmith Jr. and Estle Ray Mann, and issued on 14 December 1948, as U.S. Patent 2455992.[2] Inspired by radar display technology, it consists of an analog device allowing a user to control the parabolic arc of a dot on the screen to simulate a missile being fired at targets, which are paper drawings fixed to the screen.[3] Other early examples include Christopher Strachey's draughts game, the Nimrod computer at the 1951 Festival of Britain; OXO, a tic-tac-toe computer game by Alexander S. Douglas for the EDSAC in 1952; Tennis for Two, an electronic interactive game engineered by William Higinbotham in 1958; and Spacewar!, written by Massachusetts Institute of Technology students Martin Graetz, Steve Russell, and Wayne Wiitanen's on a DEC PDP-1 computer in 1961. Each game has different means of display: NIMROD has a panel of lights to play the game of Nim,[4] OXO has a graphical display to play tic-tac-toe,[5] Tennis for Two has an oscilloscope to display a side view of a tennis court,[3] and Spacewar! has the DEC PDP-1's vector display to have two spaceships battle each other.[6]


Ralph H. Baer in 2009
Nolan Bushnell giving a speech at the Game Developers Conference in 2011
Nolan Bushnell in 2013
These preliminary inventions paved the way for the origins of video games today. Ralph H. Baer, while working at Sanders Associates in 1966, devised a control system to play a rudimentary game of table tennis on a television screen. With the company's approval, Baer built the prototype "Brown Box". Sanders patented Baer's inventions and licensed them to Magnavox, which commercialized it as the first home video game console, the Magnavox Odyssey, released in 1972.[3][7] Separately, Nolan Bushnell and Ted Dabney, inspired by seeing Spacewar! running at Stanford University, devised a similar version running in a smaller coin-operated arcade cabinet using a less expensive computer. This was released as Computer Space, the first arcade video game, in 1971.[8] Bushnell and Dabney went on to form Atari, Inc., and with Allan Alcorn, created their second arcade game in 1972, the hit ping pong-style Pong, which was directly inspired by the table tennis game on the Odyssey. Sanders and Magnavox sued Atari for infringement of Baer's patents, but Atari settled out of court, paying for perpetual rights to the patents. Following their agreement, Atari made a home version of Pong, which was released by Christmas 1975.[3] The success of the Odyssey and Pong, both as an arcade game and home machine, launched the video game industry.[9][10] Both Baer and Bushnell have been titled "Father of Video Games" for their contributions.[11][12]

Terminology
The term "video game" was developed to distinguish this class of electronic games that were played on some type of video display rather than on a teletype printer, audio speaker or similar device.[13] This also distinguished from many handheld electronic games like Merlin which commonly used LED lights for indicators but did not use these in combination for imaging purposes.[14]

"Computer game" may also be used as a descriptor, as all these types of games essentially require the use of a computer processor, and in some cases, it is used interchangeably with "video game".[15] Particularly in the United Kingdom and Western Europe, this is common due to the historic relevance of domestically produced microcomputers. Other terms used include digital game, for example by the Australian Bureau of Statistics.[16] However, the term "computer game" can also be used to more specifically refer to games played primarily on personal computers or other type of flexible hardware systems (also known as a PC game), as a way distinguish them from console games, arcade games or mobile games.[14][13] Other terms such as "television game" or "telegame" had been used in the 1970s and early 1980s, particularly for the home gaming consoles that rely on connection to a television set.[17] In Japan, where consoles like the Odyssey were first imported and then made within the country by the large television manufacturers such as Toshiba and Sharp Corporation, such games are known as "TV games", or TV geemu or terebi geemu.[18] "Electronic game" may also be used to refer to video games, but this also incorporates devices like early handheld electronic games that lack any video output.[15] and the term "TV game" is still commonly used into the 21st century.[18][19]

The first appearance of the term "video game" emerged around 1973. The Oxford English Dictionary cited a 10 November 1973 BusinessWeek article as the first printed use of the term.[20] Though Bushnell believed the term came from a vending magazine review of Computer Space in 1971,[21] a review of the major vending magazines Vending Times and Cashbox showed that the term came much earlier, appearing first around March 1973 in these magazines in mass usage including by the arcade game manufacturers. As analyzed by video game historian Keith Smith, the sudden appearance suggested that the term had been proposed and readily adopted by those involved. This appeared to trace to Ed Adlum, who ran Cashbox's coin-operated section until 1972 and then later founded RePlay Magazine, covering the coin-op amusement field, in 1975. In a September 1982 issue of RePlay, Adlum is credited with first naming these games as "video games": "RePlay's Eddie Adlum worked at 'Cash Box' when 'TV games' first came out. The personalities in those days were Bushnell, his sales manager Pat Karns and a handful of other 'TV game' manufacturers like Henry Leyser and the McEwan brothers. It seemed awkward to call their products 'TV games', so borrowing a word from Billboard's description of movie jukeboxes, Adlum started to refer to this new breed of amusement machine as 'video games.' The phrase stuck."[citation needed] Adlum explained in 1985 that up until the early 1970s, amusement arcades typically had non-video arcade games such as pinball machines and electro-mechanical games. With the arrival of video games in arcades during the early 1970s, there was initially some confusion in the arcade industry over what term should be used to describe the new games. He "wrestled with descriptions of this type of game," alternating between "TV game" and "television game" but "finally woke up one day" and said, "what the hell... video game!"[22]

For many years, the traveling Videotopia exhibit served as the closest representation of such a vital resource. In addition to collecting home video game consoles, the Electronics Conservancy organization set out to locate and restore 400 antique arcade cabinets after realizing that the majority of these games had been destroyed and feared the loss of their historical significance.[23] Video games have significantly began to be seen in the real-world as a purpose to present history in a way of understanding the methodology and terms that are being compared. Researchers have looked at how historical representations affect how the public perceives the past, and digital humanists encourage historians to use video games as primary materials.[24] Video games, considering their past and age, have over time progressed as what a video game really means. Whether played through a monitor, TV, or a hand-held device, there are many ways that video games are being displayed for users to enjoy. People have drawn comparisons between flow-state-engaged video gamers and pupils in conventional school settings. In traditional, teacher-led classrooms, students have little say in what they learn, are passive consumers of the information selected by teachers, are required to follow the pace and skill level of the group (group teaching), and receive brief, imprecise, normative feedback on their work.[25] Video games, as they continue to develop into better graphic definition and genre's, create new terminology when something unknown tends to become known. Yearly, consoles are being created to compete against other brands with similar functioning features that tends to lead the consumer into which they'd like to purchase. Now, companies have moved towards games only the specific console can play to grasp the consumer into purchasing their product compared to when video games first began, there was little to no variety. In 1989, a console war begun with Nintendo, one of the biggest in gaming was up against target, Sega with their brand new Master System which, failed to compete, allowing the Nintendo Emulator System to be one of the most consumed product in the world.[26] More technology continued to be created, as the computer began to be used in people's houses for more than just office and daily use. Games began being implemented into computers and have progressively grown since then with coded robots to play against you. Early games like tic-tac-toe, solitaire, and Tennis for Two were great ways to bring new gaming to another system rather than one specifically meant for gaming.[27]

Definition
While many games readily fall into a clear, well-understood definition of video games, new genres and innovations in game development have raised the question of what are the essential factors of a video game that separate the medium from other forms of entertainment.

The introduction of interactive films in the 1980s with games like Dragon's Lair, featured games with full motion video played off a form of media but only limited user interaction.[28] This had required a means to distinguish these games from more traditional board games that happen to also use external media, such as the Clue VCR Mystery Game which required players to watch VCR clips between turns. To distinguish between these two, video games are considered to require some interactivity that affects the visual display.[14]

Most video games tend to feature some type of victory or winning conditions, such as a scoring mechanism or a final boss fight. The introduction of walking simulators (adventure games that allow for exploration but lack any objectives) like Gone Home, and empathy games (video games that tend to focus on emotion) like That Dragon, Cancer brought the idea of games that did not have any such type of winning condition and raising the question of whether these were actually games.[29] These are still commonly justified as video games as they provide a game world that the player can interact with by some means.[30]

The lack of any industry definition for a video game by 2021 was an issue during the case Epic Games v. Apple which dealt with video games offered on Apple's iOS App Store. Among concerns raised were games like Fortnite Creative and Roblox which created metaverses of interactive experiences, and whether the larger game and the individual experiences themselves were games or not in relation to fees that Apple charged for the App Store. Judge Yvonne Gonzalez Rogers, recognizing that there was yet an industry standard definition for a video game, established for her ruling that "At a bare minimum, videogames appear to require some level of interactivity or involvement between the player and the medium" compared to passive entertainment like film, music, and television, and "videogames are also generally graphically rendered or animated, as opposed to being recorded live or via motion capture as in films or television".[31] Rogers still concluded that what is a video game "appears highly eclectic and diverse".[31]

Video game terminology
See also: Glossary of video game terms

Freedoom, a clone of the first-person shooter Doom. Common elements include a heads-up display along the bottom that includes the player's remaining health and ammunition.
The gameplay experience varies radically between video games, but many common elements exist. Most games will launch into a title screen and give the player a chance to review options such as the number of players before starting a game. Most games are divided into levels which the player must work the avatar through, scoring points, collecting power-ups to boost the avatar's innate attributes, all while either using special attacks to defeat enemies or moves to avoid them. This information is relayed to the player through a type of on-screen user interface such as a heads-up display atop the rendering of the game itself. Taking damage will deplete their avatar's health, and if that falls to zero or if the avatar otherwise falls into an impossible-to-escape location, the player will lose one of their lives. Should they lose all their lives without gaining an extra life or "1-UP", then the player will reach the "game over" screen. Many levels as well as the game's finale end with a type of boss character the player must defeat to continue on. In some games, intermediate points between levels will offer save points where the player can create a saved game on storage media to restart the game should they lose all their lives or need to stop the game and restart at a later time. These also may be in the form of a passage that can be written down and reentered at the title screen.[citation needed]

Product flaws include software bugs which can manifest as glitches which may be exploited by the player; this is often the foundation of speedrunning a video game. These bugs, along with cheat codes, Easter eggs, and other hidden secrets that were intentionally added to the game can also be exploited.[32][33][34][35] On some consoles, cheat cartridges allow players to execute these cheat codes, and user-developed trainers allow similar bypassing for computer software games. Both of which might make the game easier, give the player additional power-ups, or change the appearance of the game.[33]

Components

Arcade video game machines at the Sugoi arcade game hall in Malmi, Helsinki, Finland
To distinguish from electronic games, a video game is generally considered to require a platform, the hardware which contains computing elements, to process player interaction from some type of input device and displays the results to a video output display.[36]

Platform

This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.
Find sources: "Video game" – news · newspapers · books · scholar · JSTOR (November 2022) (Learn how and when to remove this template message)

Various gaming consoles at the Computer Games Museum in Berlin
Video games require a platform, a specific combination of electronic components or computer hardware and associated software, to operate.[37] The term system is also commonly used. Games are typically designed to be played on one or a limited number of platforms, and exclusivity to a platform is used as a competitive edge in the video game market.[38] However, games may be developed for alternative platforms than intended, which are described as ports or conversions. These also may be remasters - where most of the original game's source code is reused and art assets, models, and game levels are updated for modern systems – and remakes, where in addition to asset improvements, significant reworking of the original game and possibly from scratch is performed.[39]

The list below is not exhaustive and excludes other electronic devices capable of playing video games such as PDAs and graphing calculators.

PC games
PC games involve a player interacting with a personal computer (PC) connected to a video monitor.[40] Personal computers are not dedicated game platforms, so there may be differences running the same game on different hardware. Also, the openness allows some features to developers like reduced software cost,[41] increased flexibility, increased innovation, emulation, creation of modifications or mods, open hosting for online gaming (in which a person plays a video game with people who are in a different household) and others. A gaming computer is a PC or laptop intended specifically for gaming, typically using high-performance, high-cost components. In additional to personal computer gaming, there also exist games that work on mainframe computers and other similarly shared systems, with users logging in remotely to use the computer.
Home console

The PlayStation 2 is the best-selling video game console, with over 155 million units sold.[42]
A console game is played on a home console, a specialized electronic device that connects to a common television set or composite video monitor. Home consoles are specifically designed to play games using a dedicated hardware environment, giving developers a concrete hardware target for development and assurances of what features will be available, simplifying development compared to PC game development. Usually consoles only run games developed for it, or games from other platform made by the same company, but never games developed by its direct competitor, even if the same game is available on different platforms. It often comes with a specific game controller. Major console platforms include Xbox, PlayStation and Nintendo.
Handheld console
A handheld game console is a small, self-contained electronic device that is portable and can be held in a user's hands. It features the console, a small screen, speakers and buttons, joystick or other game controllers in a single unit. Like consoles, handhelds are dedicated platforms, and share almost the same characteristics. Handheld hardware usually is less powerful than PC or console hardware. Some handheld games from the late 1970s and early 1980s could only play one game. In the 1990s and 2000s, a number of handheld games used cartridges, which enabled them to be used to play many different games. The handheld console has waned in the 2010s as mobile device gaming has become a more dominant factor.
Arcade video game

A police-themed arcade game in which players use a light gun
An arcade video game generally refers to a game played on an even more specialized type of electronic device that is typically designed to play only one game and is encased in a special, large coin-operated cabinet which has one built-in console, controllers (joystick, buttons, etc.), a CRT screen, and audio amplifier and speakers. Arcade games often have brightly painted logos and images relating to the theme of the game. While most arcade games are housed in a vertical cabinet, which the user typically stands in front of to play, some arcade games use a tabletop approach, in which the display screen is housed in a table-style cabinet with a see-through table top. With table-top games, the users typically sit to play. In the 1990s and 2000s, some arcade games offered players a choice of multiple games. In the 1980s, video arcades were businesses in which game players could use a number of arcade video games. In the 2010s, there are far fewer video arcades, but some movie theaters and family entertainment centers still have them.
Browser game
A browser game takes advantages of standardizations of technologies for the functionality of web browsers across multiple devices providing a cross-platform environment. These games may be identified based on the website that they appear, such as with Miniclip games. Others are named based on the programming platform used to develop them, such as Java and Flash games.
Mobile game
With the introduction of smartphones and tablet computers standardized on the iOS and Android operating systems, mobile gaming has become a significant platform. These games may use unique features of mobile devices that are not necessary present on other platforms, such as accelerometers, global positing information and camera devices to support augmented reality gameplay.
Cloud gaming
Cloud gaming requires a minimal hardware device, such as a basic computer, console, laptop, mobile phone or even a dedicated hardware device connected to a display with good Internet connectivity that connects to hardware systems by the cloud gaming provider. The game is computed and rendered on the remote hardware, using a number of predictive methods to reduce the network latency between player input and output on their display device. For example, the Xbox Cloud Gaming and PlayStation Now platforms use dedicated custom server blade hardware in cloud computing centers.
Virtual reality

Players using the PlayStation VR headsets in 2017
Virtual reality (VR) games generally require players to use a special head-mounted unit that provides stereoscopic screens and motion tracking to immerse a player within virtual environment that responds to their head movements. Some VR systems include control units for the player's hands as to provide a direct way to interact with the virtual world. VR systems generally require a separate computer, console, or other processing device that couples with the head-mounted unit.
Emulation
An emulator enables games from a console or otherwise different system to be run in a type of virtual machine on a modern system, simulating the hardware of the original and allows old games to be played. While emulators themselves have been found to be legal in United States case law, the act of obtaining the game software that one does not already own may violate copyrights. However, there are some official releases of emulated software from game manufacturers, such as Nintendo with its Virtual Console or Nintendo Switch Online offerings.
Backward compatibility
Backward compatibility is similar in nature to emulation in that older games can be played on newer platforms, but typically directly though hardware and build-in software within the platform. For example, the PlayStation 2 is capable of playing original PlayStation games simply by inserting the original game media into the newer console, while Nintendo's Wii could play GameCube titles as well in the same manner.
Game media

An unlabeled game cartridge for the Nintendo Entertainment System
Early arcade games, home consoles, and handheld games were dedicated hardware units with the game's logic built into the electronic componentry of the hardware. Since then, most video game platforms are considered programmable, having means to read and play multiple games distributed on different types of media or formats. Physical formats include ROM cartridges, magnetic storage including magnetic-tape data storage and floppy discs, optical media formats including CD-ROM and DVDs, and flash memory cards. Furthermore digital distribution over the Internet or other communication methods as well as cloud gaming alleviate the need for any physical media. In some cases, the media serves as the direct read-only memory for the game, or it may be the form of installation media that is used to write the main assets to the player's platform's local storage for faster loading periods and later updates.

Games can be extended with new content and software patches through either expansion packs which are typically available as physical media, or as downloadable content nominally available via digital distribution. These can be offered freely or can be used to monetize a game following its initial release. Several games offer players the ability to create user-generated content to share with others to play. Other games, mostly those on personal computers, can be extended with user-created modifications or mods that alter or add onto the game; these often are unofficial and were developed by players from reverse engineering of the game, but other games provide official support for modding the game.[43]

Input device
Main article: Game controller

A North American Super NES game controller from the early 1990s
Video game can use several types of input devices to translate human actions to a game. Most common are the use of game controllers like gamepads and joysticks for most consoles, and as accessories for personal computer systems along keyboard and mouse controls. Common controls on the most recent controllers include face buttons, shoulder triggers, analog sticks, and directional pads ("d-pads"). Consoles typically include standard controllers which are shipped or bundled with the console itself, while peripheral controllers are available as a separate purchase from the console manufacturer or third-party vendors.[44] Similar control sets are built into handheld consoles and onto arcade cabinets. Newer technology improvements have incorporated additional technology into the controller or the game platform, such as touchscreens and motion detection sensors that give more options for how the player interacts with the game. Specialized controllers may be used for certain genres of games, including racing wheels, light guns and dance pads. Digital cameras and motion detection can capture movements of the player as input into the game, which can, in some cases, effectively eliminate the control, and on other systems such as virtual reality, are used to enhance immersion into the game.

Display and output
Main article: Video game graphics

Handheld units, like the Game Boy, include built-in output screens and sound speakers.
By definition, all video games are intended to output graphics to an external video display, such as cathode-ray tube televisions, newer liquid-crystal display (LCD) televisions and built-in screens, projectors or computer monitors, depending on the type of platform the game is played on. Features such as color depth, refresh rate, frame rate, and screen resolution are a combination of the limitations of the game platform and display device and the program efficiency of the game itself. The game's output can range from fixed displays using LED or LCD elements, text-based games, two-dimensional and three-dimensional graphics, and augmented reality displays.

The game's graphics are often accompanied by sound produced by internal speakers on the game platform or external speakers attached to the platform, as directed by the game's programming. This often will include sound effects tied to the player's actions to provide audio feedback, as well as background music for the game.

Some platforms support additional feedback mechanics to the player that a game can take advantage of. This is most commonly haptic technology built into the game controller, such as causing the controller to shake in the player's hands to simulate a shaking earthquake occurring in game.

Classifications
Video games are frequently classified by a number of factors related to how one plays them.

Genre
Main article: Video game genre
See also: Gameplay
Dustforce is representative of the platform game genre as its gameplay involves jumping between platforms.
A video game, like most other forms of media, may be categorized into genres. However, unlike film or television which use visual or narrative elements, video games are generally categorized into genres based on their gameplay interaction, since this is the primary means which one interacts with a video game.[45][46][47] The narrative setting does not impact gameplay; a shooter game is still a shooter game, regardless of whether it takes place in a fantasy world or in outer space.[48][49] An exception is the horror game genre, used for games that are based on narrative elements of horror fiction, the supernatural, and psychological horror.[50]

Genre names are normally self-describing in terms of the type of gameplay, such as action game, role playing game, or shoot 'em up, though some genres have derivations from influential works that have defined that genre, such as roguelikes from Rogue,[51] Grand Theft Auto clones from Grand Theft Auto III,[52] and battle royale games from the film Battle Royale.[53] The names may shift over time as players, developers and the media come up with new terms; for example, first-person shooters were originally called "Doom clones" based on the 1993 game.[54] A hierarchy of game genres exist, with top-level genres like "shooter game" and "action game" that broadly capture the game's main gameplay style, and several subgenres of specific implementation, such as within the shooter game first-person shooter and third-person shooter. Some cross-genre types also exist that fall until multiple top-level genres such as action-adventure game.

Mode

A LAN party at the 2004 DreamHack with hundreds of players
A video game's mode describes how many players can use the game at the same type. This is primarily distinguished by single-player video games and multiplayer video games. Within the latter category, multiplayer games can be played in a variety of ways, including locally at the same device, on separate devices connected through a local network such as LAN parties, or online via separate Internet connections. Most multiplayer games are based on competitive gameplay, but many offer cooperative and team-based options as well as asymmetric gameplay. Online games use server structures that can also enable massively multiplayer online games (MMOs) to support hundreds of players at the same time.

A small number of video games are zero-player games, in which the player has very limited interaction with the game itself. These are most commonly simulation games where the player may establish a starting state and then let the game proceed on its own, watching the results as a passive observer, such as with many computerized simulations of Conway's Game of Life.[55]

Types
Most video games are intended for entertainment purposes.[36] Different game types include:

Core games
Core or hard-core games refer to the typical perception of video games, developed for entertainment purposes. These games typically require a fair amount of time to learn and master, in contrast to casual games, and thus are most appealing to gamers rather than a broader audience. Most of the AAA video game industry is based around the delivery of core games.[56]
Casual games
In contrast to core games, casual games are designed for ease of accessibility, simple to understand gameplay and quick to grasp rule sets, and aimed at mass market audience. They frequently support the ability to jump in and out of play on demand, such as during commuting or lunch breaks. Numerous browser and mobile games fall into the casual game area, and casual games often are from genres with low intensity game elements such as match three, hidden object, time management, and puzzle games.[57] Causal games frequently use social-network game mechanics, where players can enlist the help of friends on their social media networks for extra turns or moves each day.[58] Popular casual games include Tetris and Candy Crush Saga. More recent, starting in the late 2010s, are hyper-casual games which use even more simplistic rules for short but infinitely replayable games, such as Flappy Bird.[59]
Educational games
Education software has been used in homes and classrooms to help teach children and students, and video games have been similarly adapted for these reasons, all designed to provide a form of interactivity and entertainment tied to game design elements. There are a variety of differences in their designs and how they educate the user. These are broadly split between edutainment games that tend to focus on the entertainment value and rote learning but are unlikely to engage in critical thinking, and educational video games that are geared towards problem solving through motivation and positive reinforcement while downplaying the entertainment value.[60] Examples of educational games include The Oregon Trail and the Carmen Sandiego series. Further, games not initially developed for educational purposes have found their way into the classroom after release, such as that feature open worlds or virtual sandboxes like Minecraft,[61] or offer critical thinking skills through puzzle video games like SpaceChem.[62]
Serious games

Microsoft Flight Simulator is an example of a simulation game.
Further extending from educational games, serious games are those where the entertainment factor may be augmented, overshadowed, or even eliminated by other purposes for the game. Game design is used to reinforce the non-entertainment purpose of the game, such as using video game technology for the game's interactive world, or gamification for reinforcement training. Educational games are a form of serious games, but other types of games include fitness games that incorporate significant physical exercise to help keep the player fit (such as Wii Fit), simulator games that resemble fight simulators to pilot aircraft (such as Microsoft Flight Simulator), advergames that are built around the advertising of a product (such as Pepsiman), and newsgames aimed at conveying a specific advocacy message (such as NarcoGuerra).[63][64]
Art games
Although video games have been considered an art form on their own, games may be developed to try to purposely communicate a story or message, using the medium as a work of art. These art or arthouse games are designed to generate emotion and empathy from the player by challenging societal norms and offering critique through the interactivity of the video game medium. They may not have any type of win condition and are designed to let the player explore through the game world and scenarios. Most art games are indie games in nature, designed based on personal experiences or stories through a single developer or small team. Examples of art games include Passage, Flower, and That Dragon, Cancer.[65][66][67]
Content rating
Main article: Video game content rating system

A typical ESRB rating label, listing the rating and specific content descriptors for Rabbids Go Home
Video games can be subject to national and international content rating requirements. Like with film content ratings, video game ratings typing identify the target age group that the national or regional ratings board believes is appropriate for the player, ranging from all-ages, to a teenager-or-older, to mature, to the infrequent adult-only games. Most content review is based on the level of violence, both in the type of violence and how graphic it may be represented, and sexual content, but other themes such as drug and alcohol use and gambling that can influence children may also be identified. A primary identifier based on a minimum age is used by nearly all systems, along with additional descriptors to identify specific content that players and parents should be aware of.

The regulations vary from country to country but generally are voluntary systems upheld by vendor practices, with penalty and fines issued by the ratings body on the video game publisher for misuse of the ratings. Among the major content rating systems include:

Entertainment Software Rating Board (ESRB) that oversees games released in the United States. ESRB ratings are voluntary and rated along a E (Everyone), E10+ (Everyone 10 and older), T (Teen), M (Mature), and AO (Adults Only). Attempts to mandate video games ratings in the U.S. subsequently led to the landmark Supreme Court case, Brown v. Entertainment Merchants Association in 2011 which ruled video games were a protected form of art, a key victory for the video game industry.[68]
Pan European Game Information (PEGI) covering the United Kingdom, most of the European Union and other European countries, replacing previous national-based systems. The PEGI system uses content rated based on minimum recommended ages, which include 3+, 8+, 12+, 16+, and 18+.
Australian Classification Board (ACB) oversees the ratings of games and other works in Australia, using ratings of G (General), PG (Parental Guidance), M (Mature), MA15+ (Mature Accompanied), R18+ (Restricted), and X (Restricted for pornographic material). ACB can also deny to give a rating to game (RC – Refused Classification). The ACB's ratings are enforceable by law, and importantly, games cannot be imported or purchased digitally in Australia if they have failed to gain a rating or were given the RC rating, leading to a number of notable banned games.
Computer Entertainment Rating Organization (CERO) rates games for Japan. Their ratings include A (all ages), B (12 and older), C (15 and over), D (17 and over), and Z (18 and over).
Additionally, the major content system provides have worked to create the International Age Rating Coalition (IARC), a means to streamline and align the content ratings system between different region, so that a publisher would only need to complete the content ratings review for one provider, and use the IARC transition to affirm the content rating for all other regions.

Certain nations have even more restrictive rules related to political or ideological content. Within Germany, until 2018, the Unterhaltungssoftware Selbstkontrolle (Entertainment Software Self-Regulation) would refuse to classify, and thus allow sale, of any game depicting Nazi imagery, and thus often requiring developers to replace such imagery with fictional ones. This ruling was relaxed in 2018 to allow for such imagery for "social adequacy" purposes that applied to other works of art.[69] China's video game segment is mostly isolated from the rest of the world due to the government's censorship, and all games published there must adhere to strict government review, disallowing content such as smearing the image of the Chinese Communist Party. Foreign games published in China often require modification by developers and publishers to meet these requirements.[70]

Development
Main article: Video game development
See also: Video game industry practices

Developers use various tools to create video games. Here an editor is fine-tuning the virtual camera system.
Video game development and authorship, much like any other form of entertainment, is frequently a cross-disciplinary field. Video game developers, as employees within this industry are commonly referred, primarily include programmers and graphic designers. Over the years this has expanded to include almost every type of skill that one might see prevalent in the creation of any movie or television program, including sound designers, musicians, and other technicians; as well as skills that are specific to video games, such as the game designer. All of these are managed by producers.

In the early days of the industry, it was more common for a single person to manage all of the roles needed to create a video game. As platforms have become more complex and powerful in the type of material they can present, larger teams have been needed to generate all of the art, programming, cinematography, and more. This is not to say that the age of the "one-man shop" is gone, as this is still sometimes found in the casual gaming and handheld markets,[71] where smaller games are prevalent due to technical limitations such as limited RAM or lack of dedicated 3D graphics rendering capabilities on the target platform (e.g., some PDAs).[72]

Video games are programmed like any other piece of computer software. Prior to the mid-1970s, arcade and home consoles were programmed by assembling discrete electro-mechanical components on circuit boards, which limited games to relatively simple logic. By 1975, low-cost microprocessors were available at volume to be used for video game hardware, which allowed game developers to program more detailed games, widening the scope of what was possible.[73][74] Ongoing improvements in computer hardware technology has expanded what has become possible to create in video games, coupled with convergence of common hardware between console, computer, and arcade platforms to simplify the development process.[75] Today, game developers have a number of commercial and open source tools available for use to make games, often which are across multiple platforms to support portability, or may still opt to create their own for more specialized features and direct control of the game. Today, many games are built around a game engine that handles the bulk of the game's logic, gameplay, and rendering. These engines can be augmented with specialized engines for specific features, such as a physics engine that simulates the physics of objects in real-time. A variety of middleware exists to help developers to access other features, such as for playback of videos within games, network-oriented code for games that communicate via online services, matchmaking for online games, and similar features. These features can be used from a developers' programming language of choice, or they may opt to also use game development kits that minimize the amount of direct programming they have to do but can also limit the amount of customization they can add into a game. Like all software, video games usually undergo quality testing before release to assure there are no bugs or glitches in the product, though frequently developers will release patches and updates.

With the growth of the size of development teams in the industry, the problem of cost has increased. Development studios need the best talent, while publishers reduce costs to maintain profitability on their investment. Typically, a video game console development team ranges from 5 to 50 people, and some exceed 100. In May 2009, Assassin's Creed II was reported to have a development staff of 450.[76] The growth of team size combined with greater pressure to get completed projects into the market to begin recouping production costs has led to a greater occurrence of missed deadlines, rushed games and the release of unfinished products.[77]

While amateur and hobbyist game programming had existed since the late 1970s with the introduction of home computers, a newer trend since the mid-2000s is indie game development. Indie games are made by small teams outside any direct publisher control, their games being smaller in scope than those from the larger "AAA" game studios, and are often experiment in gameplay and art style. Indie game development are aided by larger availability of digital distribution, including the newer mobile gaming marker, and readily-available and low-cost development tools for these platforms.[78]

Game theory and studies

This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed. (June 2023) (Learn how and when to remove this template message)
Main article: Game studies
Although departments of computer science have been studying the technical aspects of video games for years, theories that examine games as an artistic medium are a relatively recent development in the humanities. The two most visible schools in this emerging field are ludology and narratology. Narrativists approach video games in the context of what Janet Murray calls "Cyberdrama". That is to say, their major concern is with video games as a storytelling medium, one that arises out of interactive fiction. Murray puts video games in the context of the Holodeck, a fictional piece of technology from Star Trek, arguing for the video game as a medium in which the player is allowed to become another person, and to act out in another world.[79] This image of video games received early widespread popular support, and forms the basis of films such as Tron, eXistenZ and The Last Starfighter.

Ludologists break sharply and radically from this idea. They argue that a video game is first and foremost a game, which must be understood in terms of its rules, interface, and the concept of play that it deploys. Espen J. Aarseth argues that, although games certainly have plots, characters, and aspects of traditional narratives, these aspects are incidental to gameplay. For example, Aarseth is critical of the widespread attention that narrativists have given to the heroine of the game Tomb Raider, saying that "the dimensions of Lara Croft's body, already analyzed to death by film theorists, are irrelevant to me as a player, because a different-looking body would not make me play differently... When I play, I don't even see her body, but see through it and past it."[80] Simply put, ludologists reject traditional theories of art because they claim that the artistic and socially relevant qualities of a video game are primarily determined by the underlying set of rules, demands, and expectations imposed on the player.

While many games rely on emergent principles, video games commonly present simulated story worlds where emergent behavior occurs within the context of the game. The term "emergent narrative" has been used to describe how, in a simulated environment, storyline can be created simply by "what happens to the player."[81] However, emergent behavior is not limited to sophisticated games. In general, any place where event-driven instructions occur for AI in a game, emergent behavior will exist. For instance, take a racing game in which cars are programmed to avoid crashing, and they encounter an obstacle in the track: the cars might then maneuver to avoid the obstacle causing the cars behind them to slow or maneuver to accommodate the cars in front of them and the obstacle. The programmer never wrote code to specifically create a traffic jam, yet one now exists in the game.

Intellectual property for video games
Main articles: Intellectual property protection of video games and Video game clone
Most commonly, video games are protected by copyright, though both patents and trademarks have been used as well.

Though local copyright regulations vary to the degree of protection, video games qualify as copyrighted visual-audio works, and enjoy cross-country protection under the Berne Convention.[82] This typically only applies to the underlying code, as well as to the artistic aspects of the game such as its writing, art assets, and music. Gameplay itself is generally not considered copyrightable; in the United States among other countries, video games are considered to fall into the idea–expression distinction in that it is how the game is presented and expressed to the player that can be copyrighted, but not the underlying principles of the game.[83]

Because gameplay is normally ineligible for copyright, gameplay ideas in popular games are often replicated and built upon in other games. At times, this repurposing of gameplay can be seen as beneficial and a fundamental part of how the industry has grown by building on the ideas of others.[84][85] For example Doom (1993) and Grand Theft Auto III (2001) introduced gameplay that created popular new game genres, the first-person shooter and the Grand Theft Auto clone, respectively, in the few years after their release.[86][87] However, at times and more frequently at the onset of the industry, developers would intentionally create video game clones of successful games and game hardware with few changes, which led to the flooded arcade and dedicated home console market around 1978.[84][88][85] Cloning is also a major issue with countries that do not have strong intellectual property protection laws, such as within China. The lax oversight by China's government and the difficulty for foreign companies to take Chinese entities to court had enabled China to support a large grey market of cloned hardware and software systems.[89] The industry remains challenged to distinguish between creating new games based on refinements of past successful games to create a new type of gameplay, and intentionally creating a clone of a game that may simply swap out art assets.[90]

Industry
Main article: Video game industry

E3 is one of the typical trade show events of the video game industry.
History
The early history of the video game industry, following the first game hardware releases and through 1983, had little structure. Video games quickly took off during the golden age of arcade video games from the late 1970s to early 1980s, but the newfound industry was mainly composed of game developers with little business experience. This led to numerous companies forming simply to create clones of popular games to try to capitalize on the market.[91] Due to loss of publishing control and oversaturation of the market, the North American home video game market crashed in 1983, dropping from revenues of around $3 billion in 1983 to $100 million by 1985. Many of the North American companies created in the prior years closed down. Japan's growing game industry was briefly shocked by this crash but had sufficient longevity to withstand the short-term effects, and Nintendo helped to revitalize the industry with the release of the Nintendo Entertainment System in North America in 1985.[91] Along with it, Nintendo established a number of core industrial practices to prevent unlicensed game development and control game distribution on their platform, methods that continue to be used by console manufacturers today.[91]

The industry remained more conservative following the 1983 crash, forming around the concept of publisher-developer dichotomies, and by the 2000s, leading to the industry centralizing around low-risk, triple-A games and studios with large development budgets of at least $10 million or more.[92] The advent of the Internet brought digital distribution as a viable means to distribute games, and contributed to the growth of more riskier, experimental independent game development as an alternative to triple-A games in the late 2000s and which has continued to grow as a significant portion of the video game industry.[93][78]

Industry roles
Video games have a large network effect that draw on many different sectors that tie into the larger video game industry. While video game developers are a significant portion of the industry, other key participants in the market include:[94]

Publishers: Companies generally that oversee bringing the game from the developer to market. This often includes performing the marketing, public relations, and advertising of the game. Publishers frequently pay the developers ahead of time to make their games and will be involved in critical decisions about the direction of the game's progress, and then pay the developers additional royalties or bonuses based on sales performances. Other smaller, boutique publishers may simply offer to perform the publishing of a game for a small fee and a portion of the sales, and otherwise leave the developer with the creative freedom to proceed. A range of other publisher-developer relationships exist between these points.
Distributors: Publishers often are able to produce their own game media and take the role of distributor, but there are also third-party distributors that can mass-produce game media and distribute to retailers. Digital storefronts like Steam and the iOS App Store also serve as distributors and retailers in the digital space.
Retailers: Physical storefronts, which include large online retailers, department and electronic stores, and specialty video game stores, sell games, consoles, and other accessories to consumers. This has also including a trade-in market in certain regions, allowing players to turn in used games for partial refunds or credit towards other games. However, with the uprising of digital marketplaces and e-commerce revolution, retailers have been performing worse than in the past.
Hardware manufacturers: The video game console manufacturers produce console hardware, often through a value chain system that include numerous component suppliers and contract manufacturer that assemble the consoles. Further, these console manufacturers typically require a license to develop for their platform and may control the production of some games, such as Nintendo does with the use of game cartridges for its systems. In exchange, the manufacturers may help promote games for their system and may seek console exclusivity for certain games. For games on personal computers, a number of manufacturers are devoted to high-performance "gaming computer" hardware, particularly in the graphics card area; several of the same companies overlap with component supplies for consoles. A range of third-party manufacturers also exist to provide equipment and gear for consoles post-sale, such as additional controllers for console or carrying cases and gear for handheld devices.
Journalism: While journalism around video games used to be primarily print-based, and focused more on post-release reviews and gameplay strategy, the Internet has brought a more proactive press that use web journalism, covering games in the months prior to release as well as beyond, helping to build excitement for games ahead of release.
Influencers: With the rising importance of social media, video game companies have found that the opinions of influencers using streaming media to play through their games has had a significant impact on game sales, and have turned to use influencers alongside traditional journalism as a means to build up attention to their game before release.
Esports: Esports is a major function of several multiplayer games with numerous professional leagues established since the 2000s, with large viewership numbers, particularly out of southeast Asia since the 2010s.
Trade and advocacy groups: Trade groups like the Entertainment Software Association were established to provide a common voice for the industry in response to governmental and other advocacy concerns. They frequently set up the major trade events and conventions for the industry such as E3.
Gamers: Proactive hobbyists who are players and consumers of video games. While their representation in the industry is primarily seen through game sales, many companies follow gamers' comments on social media or on user reviews and engage with them to work to improve their products in addition to other feedback from other parts of the industry. Demographics of the larger player community also impact parts of the market; while once dominated by younger men, the market shifted in the mid-2010s towards women and older players who generally preferred mobile and causal games, leading to further growth in those sectors.[95]
Major regional markets
See also: Video game industry § International practices
The industry itself grew out from both the United States and Japan in the 1970s and 1980s before having a larger worldwide contribution. Today, the video game industry is predominantly led by major companies in North America (primarily the United States and Canada), Europe, and southeast Asia including Japan, South Korea, and China. Hardware production remains an area dominated by Asian companies either directly involved in hardware design or part of the production process, but digital distribution and indie game development of the late 2000s has allowed game developers to flourish nearly anywhere and diversify the field.[96]

Game sales
See also: List of best-selling video games and Golden age of arcade video games

A retail display in Switzerland with a large selection of games for platforms popular in the early 2000s
According to the market research firm Newzoo, the global video game industry drew estimated revenues of over $159 billion in 2020. Mobile games accounted for the bulk of this, with a 48% share of the market, followed by console games at 28% and personal computer games at 23%.[1]

Sales of different types of games vary widely between countries due to local preferences. Japanese consumers tend to purchase much more handheld games than console games and especially PC games, with a strong preference for games catering to local tastes.[97][98] Another key difference is that, though having declined in the West, arcade games remain an important sector of the Japanese gaming industry.[99] In South Korea, computer games are generally preferred over console games, especially MMORPG games and real-time strategy games. Computer games are also popular in China.[100]

Effects on society
Culture
Main articles: Video game culture and Gamer

The Art of Video Games exhibit at the Smithsonian American Art Museum in 2012
Video game culture is a worldwide new media subculture formed around video games and game playing. As computer and video games have increased in popularity over time, they have had a significant influence on popular culture. Video game culture has also evolved over time hand in hand with internet culture as well as the increasing popularity of mobile games. Many people who play video games identify as gamers, which can mean anything from someone who enjoys games to someone who is passionate about it. As video games become more social with multiplayer and online capability, gamers find themselves in growing social networks. Gaming can both be entertainment as well as competition, as a new trend known as electronic sports is becoming more widely accepted. In the 2010s, video games and discussions of video game trends and topics can be seen in social media, politics, television, film and music. The COVID-19 pandemic during 2020–2021 gave further visibility to video games as a pastime to enjoy with friends and family online as a means of social distancing.[101][102]

Main article: Video games as an art form
Since the mid-2000s there has been debate whether video games qualify as art, primarily as the form's interactivity interfered with the artistic intent of the work and that they are designed for commercial appeal. A significant debate on the matter came after film critic Roger Ebert published an essay "Video Games can never be art",[103] which challenged the industry to prove him and other critics wrong.[104] The view that video games were an art form was cemented in 2011 when the U.S. Supreme Court ruled in the landmark case Brown v. Entertainment Merchants Association that video games were a protected form of speech with artistic merit.[105] Since then, video game developers have come to use the form more for artistic expression, including the development of art games,[106] and the cultural heritage of video games as works of arts, beyond their technical capabilities, have been part of major museum exhibits, including The Art of Video Games at the Smithsonian American Art Museum and toured at other museums from 2012 to 2016.

Main articles: Film adaptation § Video game adaptation, and Hollywood and the video game industry
Video games will inspire sequels and other video games within the same franchise, but also have influenced works outside of the video game medium. Numerous television shows (both animated and live-action), films, comics and novels have been created based on existing video game franchises. Because video games are an interactive medium there has been trouble in converting them to these passive forms of media, and typically such works have been critically panned or treated as children's media. For example, until 2019, no video game film had ever been received a "Fresh" rating on Rotten Tomatoes, but the releases of Detective Pikachu (2019) and Sonic the Hedgehog (2020), both receiving "Fresh" ratings, shows signs of the film industry having found an approach to adapt video games for the large screen.[107][108] That said, some early video game-based films have been highly successful at the box office, such as 1995's Mortal Kombat and 2001's Lara Croft: Tomb Raider.[109]

More recently since the 2000s, there has also become a larger appreciation of video game music, which ranges from chiptunes composed for limited sound-output devices on early computers and consoles, to fully-scored compositions for most modern games. Such music has frequently served as a platform for covers and remixes, and concerts featuring video game soundtracks performed by bands or orchestras, such as Video Games Live, have also become popular.[109] Video games also frequently incorporate licensed music, particularly in the area of rhythm games, furthering the depth of which video games and music can work together.[109]

Further, video games can serve as a virtual environment under full control of a producer to create new works. With the capability to render 3D actors and settings in real-time, a new type of work machinima (short for "machine cinema") grew out from using video game engines to craft narratives.[110] As video game engines gain higher fidelity, they have also become part of the tools used in more traditional filmmaking. Unreal Engine has been used as a backbone by Industrial Light & Magic for their StageCraft technology for shows like The Mandalorian.[111]

Separately, video games are also frequently used as part of the promotion and marketing for other media, such as for films, anime, and comics. However, these licensed games in the 1990s and 2000s often had a reputation for poor quality, developed without any input from the intellectual property rights owners, and several of them are considered among lists of games with notably negative reception, such as Superman 64. More recently, with these licensed games being developed by triple-A studios or through studios directly connected to the licensed property owner, there has been a significant improvement in the quality of these games, with an early trendsetting example of Batman: Arkham Asylum.[112]

Beneficial uses

This section's tone or style may not reflect the encyclopedic tone used on Wikipedia. See Wikipedia's guide to writing better articles for suggestions. (June 2023) (Learn how and when to remove this template message)
Main articles: Video games in education and Video game behavioral effects
Besides their entertainment value, appropriately-designed video games have been seen to provide value in education across several ages and comprehension levels. Learning principles found in video games have been identified as possible techniques with which to reform the U.S. education system.[113] It has been noticed that gamers adopt an attitude while playing that is of such high concentration, they do not realize they are learning, and that if the same attitude could be adopted at school, education would enjoy significant benefits.[114][dubious – discuss] Students are found to be "learning by doing" while playing video games while fostering creative thinking.[115]

Video games are also believed to be beneficial to the mind and body. It has been shown that action video game players have better hand–eye coordination and visuo-motor skills, such as their resistance to distraction, their sensitivity to information in the peripheral vision and their ability to count briefly presented objects, than nonplayers.[116] Researchers found that such enhanced abilities could be acquired by training with action games, involving challenges that switch attention between different locations, but not with games requiring concentration on single objects.[citation needed] A 2018 systematic review found evidence that video gaming training had positive effects on cognitive and emotional skills in the adult population, especially with young adults.[117] A 2019 systematic review also added support for the claim that video games are beneficial to the brain, although the beneficial effects of video gaming on the brain differed by video games types.[118]

Organisers of video gaming events, such as the organisers of the D-Lux video game festival in Dumfries, Scotland, have emphasised the positive aspects video games can have on mental health. Organisers, mental health workers and mental health nurses at the event emphasised the relationships and friendships that can be built around video games and how playing games can help people learn about others as a precursor to discussing the person's mental health.[119] A study in 2020 from Oxford University also suggested that playing video games can be a benefit to a person's mental health. The report of 3,274 gamers, all over the age of 18, focused on the games Animal Crossing: New Horizons and Plants vs Zombies: Battle for Neighborville and used actual play-time data. The report found that those that played more games tended to report greater "wellbeing".[120][121] Also in 2020, computer science professor Regan Mandryk of the University of Saskatchewan said her research also showed that video games can have health benefits such as reducing stress and improving mental health. The university's research studied all age groups – "from pre-literate children through to older adults living in long term care homes" – with a main focus on 18 to 55-year-olds.[122]

A study of gamers attitudes towards gaming which was reported about in 2018 found that millennials use video games as a key strategy for coping with stress. In the study of 1,000 gamers, 55% said that it "helps them to unwind and relieve stress ... and half said they see the value in gaming as a method of escapism to help them deal with daily work pressures".[123]

Controversies

This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources in this section. Unsourced material may be challenged and removed.
Find sources: "Video game" – news · newspapers · books · scholar · JSTOR (June 2023) (Learn how and when to remove this template message)
Main article: Video game controversies
See also: Digital media use and mental health § Autism

The compulsion loop for video games is believed to trigger dopamine release that can encourage addictive behavior.
Video games have caused controversy since the 1970s.[124] Parents and children's advocates regularly raise concerns that violent video games can influence young players into performing those violent acts in real life, and events such as the Columbine High School massacre in 1999 in which some claimed the perpetrators specifically alluded to using video games to plot out their attack, raised further fears.[citation needed] Medical experts and mental health professionals have also raised concerned that video games may be addictive, and the World Health Organization has included "gaming disorder" in the 11th revision of its International Statistical Classification of Diseases. Other health experts, including the American Psychiatric Association, have stated that there is insufficient evidence that video games can create violent tendencies or lead to addictive behavior,[125] though agree that video games typically use a compulsion loop in their core design that can create dopamine that can help reinforce the desire to continue to play through that compulsion loop and potentially lead into violent or addictive behavior.[126][127][128] Even with case law establishing that video games qualify as a protected art form, there has been pressure on the video game industry to keep their products in check to avoid over-excessive violence particularly for games aimed at younger children. The potential addictive behavior around games, coupled with increased used of post-sale monetization of video games, has also raised concern among parents, advocates, and government officials about gambling tendencies that may come from video games, such as controversy around the use of loot boxes in many high-profile games.

Numerous other controversies around video games and its industry have arisen over the years, among the more notable incidents include the 1993 United States Congressional hearings on violent games like Mortal Kombat which lead to the formation of the ESRB ratings system, numerous legal actions taken by attorney Jack Thompson over violent games such as Grand Theft Auto III and Manhunt from 2003 to 2007, the outrage over the "No Russian" level from Call of Duty: Modern Warfare 2 in 2009 which allowed the player to shoot a number of innocent non-player characters at an airport, and the Gamergate harassment campaign in 2014 that highlighted misogyny from a portion of the player demographic. The industry as a whole has also dealt with issues related to gender, racial, and LGBTQ+ discrimination and mischaracterization of these minority groups in video games. A further issue in the industry is related to working conditions, as development studios and publishers frequently use "crunch time", required extended working hours, in the weeks and months ahead of a game's release to assure on-time delivery.

Collecting and preservation
Main articles: Video game collecting and Video game preservation
See also: List of video game museums
Players of video games often maintain collections of games. More recently there has been interest in retrogaming, focusing on games from the first decades. Games in retail packaging in good shape have become collectors items for the early days of the industry, with some rare publications having gone for over US$100,000 as of 2020. Separately, there is also concern about the preservation of video games, as both game media and the hardware to play them degrade over time. Further, many of the game developers and publishers from the first decades no longer exist, so records of their games have disappeared. Archivists and preservations have worked within the scope of copyright law to save these games as part of the cultural history of the industry.

There are many video game museums around the world, including the National Videogame Museum in Frisco, Texas,[129] which serves as the largest museum wholly dedicated to the display and preservation of the industry's most important artifacts.[130] Europe hosts video game museums such as the Computer Games Museum in Berlin[131] and the Museum of Soviet Arcade Machines in Moscow and Saint-Petersburg.[132][133] The Museum of Art and Digital Entertainment in Oakland, California is a dedicated video game museum focusing on playable exhibits of console and computer games.[134] The Video Game Museum of Rome is also dedicated to preserving video games and their history.[135] The International Center for the History of Electronic Games at The Strong in Rochester, New York contains one of the largest collections of electronic games and game-related historical materials in the world, including a 5,000-square-foot (460 m2) exhibit which allows guests to play their way through the history of video games.[136][137][138] The Smithsonian Institution in Washington, DC has three video games on permanent display: Pac-Man, Dragon's Lair, and Pong.[139]

The Museum of Modern Art has added a total of 20 video games and one video game console to its permanent Architecture and Design Collection since 2012.[140][141] In 2012, the Smithsonian American Art Museum ran an exhibition on "The Art of Video Games".[142] However, the reviews of the exhibit were mixed, including questioning whether video games belong in an art museum.[143][144]

See also
	Video games portal
Lists of video games
List of accessories to video games by system
Outline of video games
Notes
 "Videogame" may also be used, though this is less frequent.
References
 Hall, Stefan (15 May 2020). "How COVID-19 is taking gaming and esports to the next level". World Economic Forum. Archived from the original on 5 May 2021. Retrieved 5 May 2021.
 U.S. Patent 2,455,992
 "Welcome to Pong-Story – Introduction". Pong-Story. Archived from the original on 27 August 2010. Retrieved 24 October 2007.
 "Welcome to... NIMROD!". goodeveca.net. Archived from the original on 23 July 2011. Retrieved 24 October 2007.
 Winter, David. "A.S.Douglas' 1952 Noughts and Crosses game". PONG-Story. Archived from the original on 23 December 2015. Retrieved 3 July 2009.
 Rabin, Steve (2005) [14 June 2005]. Introduction to Game Development. Massachusetts: Charles River Media. ISBN 978-1-58450-377-4.
 Orlando, Greg (15 May 2007). "Console Portraits: A 40-Year Pictorial History of Gaming". Wired News. Archived from the original on 16 May 2008. Retrieved 7 May 2022.
 Yagoda, Marvin (2008). "1972 Nutting Associates Computer Space". Marvin's Marvelous Mechanical Museum. Archived from the original on 28 December 2008.
 "History of Gaming – Interactive Timeline of Game History". PBS. Archived from the original on 18 February 2006. Retrieved 25 October 2007.
 Miller, Michael (1 April 2005). A History of Home Video Game Consoles. InformIT. Archived from the original on 12 October 2007. Retrieved 7 May 2022.
 Barton, Mat; Loguidice, Bill (9 January 2009). "The History Of Pong: Avoid Missing Game to Start Industry". Game Developer. Archived from the original on 12 January 2009. Retrieved 7 May 2022.
 Vendel, Curt; Goldberg, Marty (2012). Atari Inc.: Business Is Fun. Syzygy Press. pp. 26. ISBN 978-0985597405.
 Wolf, Mark (2007). "Chapter 1: What Is a Video Game?". In Wolf, Mark (ed.). The Video Game Explosion. Westport, CT: Greenwood Press. pp. 3–7. ISBN 978-0313338687.
 Wolf, Mark JP (2001). "Chapter 1: Video game as the medium". The Medium of the Video Game. University of Texas Press. pp. 13–33. ISBN 9780292791503.
 Wolf, Mark; Perron, Bernard (2003). "Introduction: An Introduction To The Video Game Theory". The Video Game Theory Reader. Routledge, Taylor & Francis Group.
 "Film, Television and Digital Games, Australia, 2015-16 financial year". Australian Bureau of Statistics. 15 June 2017. Retrieved 16 March 2023.
 Wills, John (2019). Gamer Nation: Video Games and American Culture. Johns Hopkins Press. p. 5. ISBN 9781421428697. OCLC 1088892215.
 Picard, Martin (December 2013). "The Foundation of Geemu: A Brief History of Early Japanese video games". International Journal of Computer Game Research. 13 (2). Archived from the original on 24 June 2015. Retrieved 19 November 2016.
 Akagi, Masumi (13 October 2006). アーケードTVゲームリスト国内•海外編(1971–2005) [Arcade TV Game List: Domestic • Overseas Edition (1971–2005)] (in Japanese). Japan: Amusement News Agency. ISBN 978-4990251215.
 "A red-hot market for video games". BusinessWeek. 10 November 1973. p. 212.
 Edwards, Benj (12 December 2007). "VC&G Interview: Nolan Bushnell, Founder of Atari". Vintage Computing. Archived from the original on 23 July 2020. Retrieved 3 August 2020.
 Adlum, Eddie (November 1985). "The Replay Years: Reflections from Eddie Adlum". RePlay. Vol. 11, no. 2. pp. 134–175 (152).[dead link]
 Therrien, Carl (January 2012). "Video Games Caught Up in History" (PDF). Archived (PDF) from the original on 13 November 2022.
 Spring, Dawn (3 April 2015). "Gaming history: computer and video games as historical scholarship". Rethinking History. 19 (2): 207–221. doi:10.1080/13642529.2014.973714. ISSN 1364-2529. S2CID 144613217.
 Squire, Kurt. "Video Games in Education" (PDF). Archived (PDF) from the original on 19 November 2012.
 "Video Game History". History Channel. 17 October 2022. Archived from the original on 10 March 2019. Retrieved 13 November 2022.
 "Video Game History". Smithsonian Institution. Archived from the original on 30 October 2018. Retrieved 13 November 2022.
 Perron, Bernard (2013). "From gamers to players and gameplayers: The example of interactive movies". In Wolf, Mark JP; Perron, Bernard (eds.). The Video Game Theory Reader. Routledge. pp. 259–280. ISBN 9781135205188.
 Clark, Nicole (11 November 2017). "A brief history of the "walking simulator," gaming's most detested genre". Salon. Archived from the original on 24 August 2020. Retrieved 12 September 2021.
 Zimmermann, Felix; Huberts, Christian (2019). "From walking simulator to ambience action game". Press Start. 5 (2): 29–50.
 Knoop, Joseph (10 September 2021). "Epic v Apple judge grapples with the big question: What is a videogame?". PC Gamer. Archived from the original on 15 September 2021. Retrieved 10 September 2021.
 Vargas, Jose Antonio (28 August 2006). "In Game World, Cheaters Proudly Prosper". The Washington Post. Archived from the original on 20 August 2011. Retrieved 24 October 2007.
 "Cracking the Code: The Konami Code". 1UP.com. Archived from the original on 22 May 2011. Retrieved 24 October 2007.
 Wolf, Mark J.P. (2012). Encyclopedia of Video Games: The Culture, Technology, and Art of Gaming. ABC-CLIO. p. 177. ISBN 978-0-313-37936-9.
 Björk, Staffan; Holopainen, Jussi (2005). Patterns In Game Design Archived 5 May 2016 at the Wayback Machine. Charles River Media. p. 235. ISBN 978-1-58450-354-5. Retrieved 25 January 2013.
 De Prato, Guiditta; Feijóo, Claudio; Nepelski, Daniel; Bogdanowicz, Marc; Simon, Jean Paul (2010). Born digital/grown digital: Assessing the future competitiveness of the EU video games software industry (Report). JRC Scientific and Technical Reports.
 "Platform". Dictionary.com. Archived from the original on 7 November 2007. Retrieved 3 November 2007.
 Gamble, John (2007). "Competition in Video Game Consoles: Sony, Microsoft and Nintendo Battle for Supremacy". In Thompson, Arthur; Strickland III, A. J.; Gamble, John (eds.). Crafting and Executing Strategy: The Quest for Competitive Advantage: Concepts and Cases. McGraw-Hill. pp. C-198–C211. ISBN 978-0073381244.
 Grabarczyk, Pawel; Aarseth, Espen (August 2019). "Port or conversion? An ontological framework for classifying game versions". Proceedings of the 2019 DiGRA International Conference: Game, Play and the Emerging Ludo-Mix. DiGRA Conference 2019. Archived from the original on 29 July 2020. Retrieved 5 May 2021.
 Olle, David; Westcott, Jean Riescher (2018). Video Game Addiction. Stylus Publishing, LLC. p. 16. ISBN 978-1-937585-84-6. Archived from the original on 9 August 2018. Retrieved 9 August 2018.
 Lane, Rick (13 December 2011). "Is PC Gaming Really More Expensive Than Consoles?". Archived from the original on 13 August 2016. Retrieved 9 August 2016.
 GameCentral staff (27 June 2013). "Xbox 360 beats Wii as the UK's best-selling console". Metro. Archived from the original on 19 April 2019. Retrieved 31 October 2013.
 Hyman, Paul (9 April 2004). "Hollywood Reporter interviewing Doug Lombardi, Quote: "Mods absolutely helped us drive huge sales to 'Half-Life'"". The Hollywood Reporter. Archived from the original on 6 May 2008. Retrieved 10 August 2009..
 Thomas, David; Orland, Kyle; Steinberg, Scott (2007). The Videogame Style Guide and Reference Manual (PDF). Power Play Publishing. p. 21. ISBN 9781430313052. Archived (PDF) from the original on 11 July 2011. Retrieved 13 September 2021.
 Apperley, Thomas H. (2006). "Genre and game studies" (PDF). Simulation & Gaming. 37 (1): 6–23. doi:10.1177/1046878105282278. S2CID 17373114. Archived from the original (PDF) on 5 October 2013. Retrieved 19 April 2013.
 Adams, Ernest (9 July 2009). "Background: The Origins of Game Genres". Game Developer. Archived from the original on 17 December 2014. Retrieved 7 May 2022.
 Wolf, Mark J.P. (2008). The Video Game Explosion: A History from PONG to Playstation and Beyond. ABC-CLIO. p. 259. ISBN 978-0313338687. Archived from the original on 23 April 2021. Retrieved 3 December 2014.
 Adams, Ernest; Andrew Rollings (2006). Fundamentals of Game Design. Prentice Hall. p. 67. ISBN 978-0-13-343571-9. Archived from the original on 15 September 2020. Retrieved 12 November 2015.
 Harteveld, Casper (2011). Triadic Game Design: Balancing Reality, Meaning and Play. Springer Science & Business Media. p. 71. ISBN 978-1-84996-157-8. Archived from the original on 30 January 2022. Retrieved 12 November 2020.
 Perron, Bernard (2009). "Games of Fear: A Multi-Faceted Historical Account of the Horror Genre in Video Games". In Perron, Bernard (ed.). Horror Video Games: Essays on the Fusion of Fear and Play. McFarland & Company. pp. 26–45. ISBN 978-0786441976.
 Parish, Jeremy. "The Essential 50 Part 12 – Rogue". 1UP.com. Archived from the original on 28 February 2013. Retrieved 1 March 2009.
 Lecky-Thompson, Guy W. (1 January 2008). Video Game Design Revealed. Cengage Learning. p. 23. ISBN 978-1584506072. Archived from the original on 22 April 2021. Retrieved 3 December 2014.
 Zavarise, Giada (6 December 2018). "How Battle Royale went from a manga to a Fortnite game mode". Rock, Paper, Shotgun. Archived from the original on 26 July 2020. Retrieved 24 May 2020.
 Arsenault, Dominic (2009). "Video Game Genre, Evolution and Innovation". Eludamos. Journal for Computer Game Culture. 3 (2): 149–176. doi:10.7557/23.6003. S2CID 62171492.
 Phillips, Tom (15 April 2020). "Video game pioneer John H. Conway dies aged 82". Eurogamer. Archived from the original on 27 April 2020. Retrieved 19 March 2021.
 Keogh, Brendan. "Between Triple-A, indie, casual, and DIY: Sites of tension in the videogames cultural industries." In The Routledge companion to the cultural industries, pp. 152-162. Routledge, 2015.
 Boyes, Emma (18 February 2008). "GDC '08: Are casual games the future?". CNET. Archived from the original on 11 July 2011. Retrieved 7 May 2022.
 Ricchetti, Matt (17 February 2012). "What Makes Social Games Social?". Gamasutra. Archived from the original on 12 August 2020. Retrieved 13 August 2020.
 Bradshaw, Tim (20 August 2020). "How 'hyper-casual' games are winning the mobile market". Financial Times. Archived from the original on 13 January 2021. Retrieved 29 March 2021.
 Dondlinger, Mary Jo (2007). "Educational Video Game Design: A Review of the Literature". Journal of Applied Educational Technology. 4 (1): 21–31.
 Walton, Mark (25 November 2012). "Minecraft In Education: How Video Games Are Teaching Kids". GameSpot. CBS Interactive. Archived from the original on 10 October 2013. Retrieved 9 December 2012.
 Davidson, Pete (7 July 2011). "SpaceChem Used as Educational Tool in Schools". GamePro. Archived from the original on 2 December 2011. Retrieved 18 July 2011.
 Wiemeyer, Josef; Dörner, Ralf; Göbel, Stefan; Effelsberg, Wolfgang (2016). "1. Introduction". Serious Games: Foundations, Concepts and Practice. Springer International Publishing. ISBN 978-3319406121.
 Djaouti, Damien; Alvarez, Julian; Jessel, Jean-Pierre; Rampnoux, Olivier (2011). "Origins of Serious Games". Serious Games and Edutainment Applications. Springer. pp. 25–43. doi:10.1007/978-1-4471-2161-9_3. ISBN 978-1-4471-2160-2.
 Schilling, Chris (23 July 2009). "Art house video games". The Daily Telegraph. London. Archived from the original on 10 January 2022.
 Holmes, Tiffany. Arcade Classics Span Art? Current Trends in the Art Game Genre. Archived 2013-04-20 at the Wayback Machine. Melbourne DAC 2003. 2003.
 Gintere, Ieva (2019). A New Digital Art Game: The Art of the Future. Society. Integration. Education. Proceedings of the International Scientific Conference. Vol. 4. pp. 346–360.
 McCauley, Dennis. "The Political Game: A Brief History of Video Game Legislation". joystiq.com. Archived from the original on 24 December 2012. Retrieved 20 January 2013.
 Handrahan, Matthew (9 August 2018). "Germany relaxes stance on Nazi symbols in video games". GamesIndustry.biz. Archived from the original on 13 July 2021. Retrieved 9 August 2018.
 Jones, Ali (11 December 2018). "Fortnite, PUBG, and Paladins have reportedly been banned by the Chinese government". PCGamesN. Archived from the original on 6 August 2020. Retrieved 11 December 2018.
 Parkin, Simon (3 August 2009). "The Edge of Reason?". Eurogamer. Archived from the original on 19 November 2009. Retrieved 16 November 2009.
 Reimer, Jeremy (8 November 2005). "Cross-platform game development and the next generation of consoles". Ars Technica. Archived from the original on 3 June 2020. Retrieved 3 June 2020.
 Steve L. Kent (2001), The ultimate history of video games: from Pong to Pokémon and beyond : the story behind the craze that touched our lives and changed the world, p. 64, Prima, ISBN 0-7615-3643-4
 June, Laura (16 January 2013). "For Amusement Only: The Life and Death of the American Arcade". The Verge. Archived from the original on 6 October 2014. Retrieved 8 March 2021.
 Edwards, Benj (26 August 2016). "Son of PC: The History of x86 Game Consoles". PC Magazine. Archived from the original on 5 December 2020. Retrieved 31 July 2020.
 "Assassin's Creed II dev team triples in size", Christopher Reynolds, 18 May 2009, NOW Gamer. Archived 15 May 2016 at the Portuguese Web Archive
 Schreier, Jason. "The Messy, True Story Behind The Making of Destiny". Kotaku. Archived from the original on 15 November 2016. Retrieved 15 November 2016.
 Crogan, Patrick (2018). "Indie Dreams: Video Games, Creative Economy, and the Hyperindustrial Epoch" (PDF). Games and Culture. 13 (7): 671–689. doi:10.1177/1555412018756708. S2CID 148890661. Archived from the original on 30 January 2022. Retrieved 27 April 2021.
 Murray 1998.
 Aarseth, Espen J. (21 May 2004). "Genre Trouble". Electronic Book Review. Archived from the original on 19 June 2006. Retrieved 14 June 2006.
 "IGN: GDC 2004: Warren Spector Talks Games Narrative". Xbox.ign.com. Archived from the original on 11 April 2009.
 "Berne Convention for the Protection of Literary and Artistic Works". www.wipo.int. Archived from the original on 1 November 2021. Retrieved 4 May 2017.
 Lampros, Nicholas M. (2013). "Leveling Pains: Clone Gaming and the Changing Dynamics of an Industry". Berkeley Technology Law Journal. 28: 743.
 Chen, Brian X. (11 March 2012). "For Creators of Games, a Faint Line on Cloning". The New York Times. Archived from the original on 1 November 2021. Retrieved 6 September 2019.
 Webster, Andrew (6 December 2009). "Cloning or theft? Ars explores game design with Jenova Chen". Ars Technica. Archived from the original on 7 May 2021. Retrieved 20 October 2015.
 Turner, Benjamin & Bowen, Kevin, Bringin' in the DOOM Clones, GameSpy, 11 December 2003, Accessed 19 February 2009
 "Hunt for Grand Theft Auto pirates". BBC News. 21 October 2004. Archived from the original on 29 April 2009. Retrieved 26 August 2008.
 Kelly, Tadhg (5 January 2014). "Why all the Clones". TechCrunch. Archived from the original on 5 March 2021. Retrieved 20 October 2015.
 Snyder, Matt (17 May 2018). China's Digital Game Sector (PDF) (Report). United States-China Economic and Security Review Commission. Archived (PDF) from the original on 21 March 2021. Retrieved 25 September 2019.
 Parkin, Simon (23 December 2011). "Clone Wars: is plagiarism killing creativity in the games industry?". The Guardian. Archived from the original on 1 November 2021. Retrieved 7 August 2012.
 Ernkvist, Mirko (2008). "Down many times, but still playing the game: Creative destruction and industry crashes in the early video game industry 1971–1986". In Gratzer, Karl; Stiefel, Dieter (eds.). History of Insolvancy and Bankruptcy. Södertörns högskola. pp. 161–191. ISBN 978-91-89315-94-5.
 Demaria, Rusel; Wilson, John (2002). High Score!: The Illustrated History of Electronic Games (1st ed.). McGraw-Hill Osborne Media. ISBN 0-07-222428-2.
 Cobbett, Richard (22 September 2017). "From shareware superstars to the Steam gold rush: How indie conquered the PC". PC Gamer. Archived from the original on 9 September 2021. Retrieved 25 September 2017.
 Marchand, André; Hennig-Thurau, Thorsten (August 2013). "Value Creation in the Video Game Industry: Industry Economics, Consumer Benefits, and Research Opportunities". Journal of Interactive Marketing. 27 (3): 141–157. doi:10.1016/j.intmar.2013.05.001.
 Pulliam-Moore, Charles (21 August 2014). "Women significantly outnumber teenage boys in gamer demographics". PBS News Hour. Archived from the original on 12 March 2021. Retrieved 2 April 2021.
 Sotamaa, Olli (2009). "Studying Game Development Cultures". Games and Culture. 4: 276. doi:10.1177/1555412009339732. S2CID 8568117.
 Ashcraft, Brian (18 January 2013). "Why PC Gaming Is Still Niche in Japan". Kotaku. Archived from the original on 23 June 2018. Retrieved 23 June 2018.
 Byford, Sam (20 March 2014). "Japan used to rule video games, so what happened?". The Verge. Archived from the original on 23 June 2018. Retrieved 23 June 2018.
 Lewis, Leo (9 February 2017). "Game on: why Japan's arcades are still winning". Financial Times. Archived from the original on 27 December 2017. Retrieved 26 December 2017.
 Usher, William (11 March 2012). "PC Game Sales Top $18.6 Billion In 2011". Gaming Blend. Cinema Blend. Archived from the original on 9 June 2012. Retrieved 17 March 2012.
 Romero, Nick (19 March 2020). "Game (still) on: How coronavirus is impacting the gaming industry". Entertainment Weekly. Archived from the original on 8 April 2020. Retrieved 27 March 2020.
 Howley, Daniel (18 March 2020). "The world is turning to video games amid coronavirus outbreak". Yahoo!. Archived from the original on 8 April 2020. Retrieved 27 March 2020.
 Ebert, Roger (16 April 2010). "Video games can never be art". Chicago Sun-Times. Archived from the original on 10 October 2011. Retrieved 31 August 2010.
 Shackford, Scott (4 April 2013). "The Time Roger Ebert Dismissed Video Games and What Happened Next". Reason. Archived from the original on 14 September 2020. Retrieved 13 August 2020.
 Kuchera, Ben (27 June 2011). "Supreme Court strikes down video game law on first amendment grounds". Ars Technica. Archived from the original on 15 September 2020. Retrieved 13 August 2020.
 Steinberg, Scott (31 August 2010). "Who says video games aren't art?". CNN. Archived from the original on 3 September 2010. Retrieved 31 August 2010.
 Whitten, Sarah (14 February 2020). "'Sonic the Hedgehog' is up against the stigma of video game flops at the box office". CNBC. Archived from the original on 26 July 2021. Retrieved 16 February 2020.
 Kroll, Justin (28 May 2020). "'Sonic the Hedgehog' Sequel in the Works". Variety.com. Archived from the original on 29 May 2020. Retrieved 28 May 2020.
 "10.4 The Impact of Video Games on Culture". Understanding Media and Culture. University of Minnesota Press. 2010.
 Lowood, Henry (2005). "Real-Time Performance: Machinima and Game Studies" (PDF). The International Digital Media & Arts Association Journal. 2 (1): 10–17. ISSN 1554-0405. Archived from the original (PDF) on 1 January 2006. Retrieved 22 March 2013.
 Good, Owen (20 February 2020). "How Lucasfilm used Unreal Engine to make The Mandalorian". Polygon. Archived from the original on 13 November 2020. Retrieved 1 August 2020.
 Favis, Elise (5 March 2021). "From Star Wars to Marvel, licensed video games are becoming more ambitious. Here's why". The Washington Post. Archived from the original on 1 November 2021. Retrieved 26 July 2021.
 Gee, James Paul (2003). What Video Games Have to Teach us About Literacy and Learning. Palgrave Macmillan. ISBN 978-1-4039-6169-3.
 James Paul Gee; et al. (2007). "Wired 11.05: View". Codenet, Inc. Archived from the original on 17 May 2008. Retrieved 4 December 2007.
 Glazer, S. (2006). "Video games". CQ Researcher. 16: 937–960. cqresrre2006111000.
 Green, C. Shawn; Bavelier, Daphne (2003). "Action video game modifies visual selective attention". Nature. 423 (6939): 534–537. Bibcode:2003Natur.423..534G. doi:10.1038/nature01647. PMID 12774121. S2CID 1521273. Green & Bavelier. Archived from the original on 6 June 2020. Retrieved 13 September 2020.
 Pallavicini, Federica; Ferrari, Ambra; Mantovani, Fabrizia (7 November 2018). "Video Games for Well-Being: A Systematic Review on the Application of Computer Games for Cognitive and Emotional Training in the Adult Population". Frontiers in Psychology. 9: 2127. doi:10.3389/fpsyg.2018.02127. ISSN 1664-1078. PMC 6234876. PMID 30464753.
 Brilliant T., Denilson; Nouchi, Rui; Kawashima, Ryuta (25 September 2019). "Does Video Gaming Have Impacts on the Brain: Evidence from a Systematic Review". Brain Sciences. 9 (10): 251. doi:10.3390/brainsci9100251. ISSN 2076-3425. PMC 6826942. PMID 31557907.
 "D-Lux: The video game festival talking about mental health". BBC News. 11 February 2020. Archived from the original on 27 July 2021. Retrieved 27 June 2021.
 Hern, Alex (16 November 2020). "Video gaming can benefit mental health, find Oxford academics". The Guardian. Archived from the original on 23 June 2021. Retrieved 27 June 2021.
 Chilton, Louis (16 November 2020). "Video games can provide benefits to mental health, suggests new Oxford University study". The Independent. Archived from the original on 2 November 2021. Retrieved 27 June 2021.
 "U of S research finds video games can relieve stress, improve mental health". CBC News. 10 May 2020. Archived from the original on 4 August 2021. Retrieved 5 August 2021.
 Bailey, Grant (9 February 2018). "Playing video games is a key strategy for coping with stress, study finds". The Independent. Archived from the original on 4 August 2021. Retrieved 5 August 2021.
 "A Timeline of Video Game Controversies". National Coalition Against Censorship. Retrieved 28 June 2023.
 Draper, Kevin (5 August 2019). "Video Games Aren't Why Shootings Happen. Politicians Still Blame Them". The New York Times. Archived from the original on 26 April 2020. Retrieved 22 August 2019.
 Barrus, Michael M.; Winstanley, Catharine A. (20 January 2016). "Dopamine D3 Receptors Modulate the Ability of Win-Paired Cues to Increase Risky Choice in a Rat Gambling Task". The Journal of Neuroscience. 36 (3): 785–794. doi:10.1523/JNEUROSCI.2225-15.2016. PMC 6602008. PMID 26791209. S2CID 23617462.
 Kim, Joseph (23 March 2014). "The Compulsion Loop Explained". Gamasutra. Archived from the original on 14 August 2020. Retrieved 3 February 2020.
 Parkin, Simon (8 August 2019). "No, Video Games Don't Cause Mass Shootings. But The Conversation Shouldn't End There". Time. Archived from the original on 3 September 2020. Retrieved 3 February 2020.
 "National Videogame Museum". nvmusa.org. Archived from the original on 2 December 2017.
 "National Videogame Museum opens in Frisco". Fox4news.com. 12 April 2016. Archived from the original on 7 November 2017.
 "Computerspielemuseum – Berlin". Computerspielemuseum.de. Archived from the original on 1 May 2011.
 "Museum of Soviet arcade machines". 15kop.ru. Archived from the original on 28 January 2010.
 "Red Penguin: Review of the Museum of Soviet arcade machines". redpenguin.net. Archived from the original on 21 September 2013. Retrieved 1 June 2013.
 "About The MADE". themade.org. Archived from the original on 30 May 2013.
 "ViGaMus". vigamus.com. Archived from the original on 13 December 2012.
 Wolf, Mark J.P., ed. (2012). "International Center for the History of Electronic Games (ICHEG)". Encyclopedia of Video Games: The Culture, Technology, and Art of Gaming. p. 329.
 Jacobs, Stephen (22 November 2010). "Strong's eGameRevolution Exhibit Gives Game History Its First Permanent Home". Gamasutra. Archived from the original on 12 May 2013. Retrieved 26 May 2013.
 "eGameRevolution". International Center for the History of Electronic Games. Archived from the original on 27 May 2013. Retrieved 26 May 2013.
 "History of Computing: Video games – Golden Age". thocp.net. Archived from the original on 26 December 2011.
 Anttonelli, Paola (29 November 2012). "Video Games: 14 in the Collection, for Starters". MoMA. Archived from the original on 8 September 2015.
 Galloway, Paul (23 June 2013). "Video Games: Seven More Building Blocks in MoMA's Collection". MoMA. Archived from the original on 8 September 2015.
 "Exhibitions: The Art of Video Games". Americanart.si.edu. Archived from the original on 10 January 2011. Retrieved 8 July 2012.
 Barron, Christina (29 April 2012). "Museum exhibit asks: Is it art if you push 'start'?". The Washington Post. Archived from the original on 4 June 2013. Retrieved 12 February 2013.
 Kennicott, Philip (18 March 2012). "The Art of Video Games". The Washington Post. Archived from the original on 4 June 2013. Retrieved 12 February 2013.
Sources
Murray, Janet (1998). Hamlet on the Holodeck. MIT Press. ISBN 978-0-262-63187-7.
Further reading
Blodget, Henry (12 April 2005). "How to Solve China's Piracy Problem". Slate.com. Archived from the original on 8 November 2011. Retrieved 12 February 2006.
Costikyan, Greg (1994). "I Have No Words & I Must Design". Archived from the original on 12 August 2008.
Crawford, Chris (1982). The Art of Computer Game Design. Archived from the original on 2 July 2015. Retrieved 2 February 2011.
Lieu, Tina (August 1997). "Where have all the PC games gone?". Computing Japan. Archived from the original on 12 January 1998.
Pursell, Carroll (2015). From Playgrounds to PlayStation: The Interaction of Technology and Play. Baltimore, MD: Johns Hopkins University Press.
Salen, Katie; Eric Zimmerman (2005). The Game Design Reader: A Rules of Play Anthology. The MIT Press. ISBN 978-0-262-19536-2.
Smuts, Aaron (2005). "Are Video Games Art?". Archived from the original on 14 December 2010. Retrieved 17 August 2006.
Winegarner, Beth (28 January 2005). "Game sales hit record highs". GameSpot. Gamespot. Archived from the original on 6 January 2012. Retrieved 12 February 2006.
John Wills (1 October 2002). "Digital Dinosaurs and Artificial Life: Exploring the Culture of Nature in Computer and Video Games". Cultural Values (Journal for Cultural Research). 6 (4): 395–417. doi:10.1080/1362517022000047334. S2CID 144132612.
Williams, J.P.; Smith, J.H., eds. (2007). The players' realm: studies on the culture of video games and gaming. Jefferson, NC: McFarland & Co.
How can video games boost your mental health? – Max Birk (Eindhoven University of Technology)
The Ultimate History of Video Games: From Pong to Pokemon--The Story Behind the Craze That Touched Our Lives and Changed the World by Steven L. Kent, Crown, 2001, ISBN 0761536434
The Ultimate History of Video Games, Volume 2: Nintendo, Sony, Microsoft, and the Billion-Dollar Battle to Shape Modern Gaming by Steven L. Kent, Crown, 2021, ISBN 1984825437
External links
Video game
at Wikipedia's sister projects
Definitions from Wiktionary
Media from Commons
News from Wikinews
Quotations from Wikiquote
Texts from Wikisource
Textbooks from Wikibooks
Resources from Wikiversity
Library resources about
Video game
Resources in your library
Resources in other libraries
Video games bibliography by the French video game research association Ludoscience
The Virtual Museum of Computing (VMoC) (archived 10 October 2014)
vte
Video game concepts
vte
Video game genres
vte
History of video games
vte
Game genres
Authority control databases: National Edit this at Wikidata
GermanyIsraelUnited StatesCzech Republic 2Korea 2
Categories: Video gamesGames and sports introduced in 1947Digital mediaAmerican inventions
